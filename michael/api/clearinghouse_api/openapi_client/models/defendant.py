# coding: utf-8

"""
    Civil Rights Clearinghouse Simple API

    Python Client to Scrapte the University of Michigan Civil Rights Clearinghouse.  Basic installation: ```sh pip install git+https://github.com/calexander/law-data-design-vip.git ``` 

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Defendant(BaseModel):
    """
    When adding entries for defendants, we record only the \"real party in interest\" – that is, who is really being sued. This may be different from the names listed on a complaint, as sometimes a suit will be filed naming an individual who represents or works for a government agency, but it’s the agency that defends the lawsuit, obeys the injunction, and pays the damages. For example, if a plaintiff sues a state, the state's governor, and the state's attorney general, we usually would record only the state as a defendant.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the \"real party in interest\" – typically the institution being sued or the institution represented by the individuals being sued. Sometimes, this might also be the title of a position that a person holds. In very rare cases, name will refer to an actual person.")
    institution: Optional[StrictStr] = Field(default=None, description="The institution or agency that took the action that formed the basis of the lawsuit. If this is the same as name, then institution should be an empty string.")
    institution_city: Optional[StrictStr] = Field(default=None, description="The city of the defendant's location. This is not where the challenged action(s) took place. If the defendant is a state or federal entity (i.e. applies to the whole state or country), then institution_city is an empty string.")
    institution_county: Optional[StrictStr] = Field(default=None, description="The county of the defendant's location. This is not where the challenged action(s) took place. The choices for this field are limited to the counties in the case's state. If the defendant is a state or federal entity (i.e. applies to the whole state or country), then institution_county is null. ")
    institution_alt_state: Optional[StrictStr] = Field(default=None, description="The state of the defendant's location if the state is different from the case's state (see [state](https://api.clearinghouse.net/api-reference/objects/case/case-details#state)). If the defendant's state is the same as the case's state is null. If the defendant is a federal entity, then institution_alt_state is \"- United States (national) -\". Similarly, if the defendant is an international entity, then institution_alt_state is \"- International -\". For a full list of possible states, see [state](https://api.clearinghouse.net/api-reference/objects/case/case-details#state). ")
    defendant_level: Optional[StrictStr] = Field(default=None, description="The type or category of the defendant in terms of what the defendant governs. ***null*** - The defendant's level does not fit within one of the Clearinghouse's predefined choices. See [defendant_level_other-not-in-api-yet](https://api.clearinghouse.net/api-reference/objects/defendant#defendant_level_other-not-in-api-yet). ***City*** - A city or city-level entity. ***County*** - A county or county-level entity. ***Federal*** - A country or federal entity. ***Non-profit or advocacy*** - A nonprofit or advocacy organization that is not a governmental body. ***Political Party*** - A political party. ***Private Entity/Person*** - A private entity or individual person. ***Regional*** - An entity associated with a region that is not a city, county, state, or country. ***School District*** - A public school district. ***State*** - A state or state entity. ***Tribe*** - An indigenous tribe. ***Union*** - A labor union. Note: This is different from [the \"Defendant-type\" case issue](https://api.clearinghouse.net/api-reference/objects/case/issues#defendant-type). ")
    defendant_level_other: Optional[StrictStr] = Field(default=None, description="The type or category of the defendant in terms of what the defendant governs if it does not fall under one of the options for [defendent_level](https://api.clearinghouse.net/api-reference/objects/defendant#defendent_level). Note: This is different from [the \"Defendant-type\" case issue](https://api.clearinghouse.net/api-reference/objects/defendant#defendent_level). ")
    __properties: ClassVar[List[str]] = ["name", "institution", "institution_city", "institution_county", "institution_alt_state", "defendant_level", "defendant_level_other"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Defendant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Defendant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "institution": obj.get("institution"),
            "institution_city": obj.get("institution_city"),
            "institution_county": obj.get("institution_county"),
            "institution_alt_state": obj.get("institution_alt_state"),
            "defendant_level": obj.get("defendant_level"),
            "defendant_level_other": obj.get("defendant_level_other")
        })
        return _obj



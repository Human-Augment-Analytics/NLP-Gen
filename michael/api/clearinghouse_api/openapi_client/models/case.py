# coding: utf-8

"""
    Civil Rights Clearinghouse Simple API

    Python Client to Scrapte the University of Michigan Civil Rights Clearinghouse.  Basic installation: ```sh pip install git+https://github.com/calexander/law-data-design-vip.git ``` 

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.case_plaintiff_type_inner import CasePlaintiffTypeInner
from openapi_client.models.defendant import Defendant
from openapi_client.models.docket import Docket
from openapi_client.models.document import Document
from openapi_client.models.resource import Resource
from typing import Optional, Set
from typing_extensions import Self

class Case(BaseModel):
    """
    Each endpoint returns a list of cases, where each case is a JSON dictionary. Because cases in the Clearinghouse are being added and updated all the time, the case_status of a case is useful for understanding why some fields might be empty. For more information on the different statuses, see case_status.
    """ # noqa: E501
    attorney_orgs: Optional[List[StrictStr]] = Field(default=None, description="Organizations that represent the plaintiff. The possible organizations for ```attorney_orgs``` come from a predefined list of public interest organizations. For a full list, including a description and link for each organization see [the Clearinhouse page on attorney organizations](https://clearinghouse.net/attorney-orgs)")
    available_documents: Optional[List[StrictStr]] = Field(default=None, description="A list of the types of documents available in the Clearinhouse for this case. For example, if the array includes \"Complaint (any)\", then there is at least one document that is a complaint for the case. ***Any*** ***published*** ***opinion*** - A judicial opinion or oder that has been published in a reporter. For more information on what it means for an opinion to be published, see [Citations](https://api.clearinghouse.net/api-reference/objects/document/citations). ***Complaint*** ***(any)*** - A document that contains the facts underlying the lawsuit, the plaintiff's legal claims, and what the plaintiff would like the court to do. A complaint often starts a case. ***Injunctive (or Injunctive-like) Relief*** - A document that sets forth how a party will change its behavior. This could be a court order or a settlement. ***Monetary Relief*** - A document that awards monetary relief (e.g. damages) to a party. ***Non-settlement Outcome*** - A document that provides an outcome to a case that is not a settlement, e.g. a judgment. ***Trial Court Docket*** - The trial court docket for the case. This includes both dockets saved as PDF documents and dockets saved as Docket Entry objects. For more about the different ways we save dockets, see [Docket Entry](https://api.clearinghouse.net/api-reference/objects/docket-entry). ***U.S. Supreme Court merits opinion*** - A U.S. Supreme Court opinion that contains legal analysis (as opposed to e.g. only denying certiorari). ***None of the above*** - We have no documents that fall into the above categories.")
    case_defendants: Optional[List[Defendant]] = Field(default=None, description="An array of Defendant objects. See [Defendant](https://api.clearinghouse.net/api-reference/objects/defendant).")
    case_documents: Optional[List[Document]] = Field(default=None, description="A list of document objects. For descriptions of the document fields, see [Document](https://api.clearinghouse.net/api-reference/objects/document).")
    case_dockets: Optional[List[Docket]] = Field(default=None, description="An array of Docket objects, representing the dockets associated with the case. See [Docket](https://api.clearinghouse.net/api-reference/objects/docket).")
    case_resources: Optional[List[Resource]] = Field(default=None, description="A list of resource objects. For descriptions of the resource fields, see (Resource)[https://api.clearinghouse.net/api-reference/objects/resource].")
    case_ongoing: Optional[StrictStr] = Field(default=None, description="Whether the case is ongoing. Possible values: ***Yes*** - There are still things that will happen in the case. ***Unknown*** - We aren't sure if anything else will happen. ***Perhaps, but long dormant*** - We think there might still be things to happen in the case, but nothing has happened for awhile. ***No reason to think so*** - We don't think the case is still ongoing, but we're not sure. ***No*** - The case is closed. If this field is empty, then check the [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status). ")
    case_status: Optional[StrictStr] = Field(default=None, description="The case_status indicates where a case is in the process of filling out the summary and metadata. Possible values:   ***Approved*** - The case's summary and metadata are complete.    ***Coding Complete*** - The case's metadata is complete, but the summary may not have been published yet and is likely awaiting internal review.    ***In Process (Public)*** - The case has been added to the Clearinghouse, but work on the summary and metadata has not started or is in progress. There may be a temporary 1-2 sentence summary, but it is likely that there is incomplete information.    The case status can be helpful in interpreting empty values for some fields. For example, if a case's order_start_year is empty and case_status is \"In Process (Public)\", then it's possible the case did have an injunction (or injunctive-like order) but we have yet to enter in that piece of metadata. On the other hand, if order_start_year is empty, case_ongoing is \"No\", and case_status is \"Approved\", then there was no injunction (or injunctive-like order) in the case. ")
    case_types: Optional[List[StrictStr]] = Field(default=None, description="The case types that apply to the case. Every case has at least one type, and some will have multiple. For a full list of possible case types (with descriptions), see [here](https://clearinghouse.net/case-types).")
    cause_other: Optional[StrictStr] = Field(default=None, description="The case's cause(s) of action that are not in the Clearinghouse's predefined list.")
    causes: Optional[List[StrictStr]] = Field(default=None, description="The cause(s) of action for the case. If causes is an empty list, then check [cause_other](https://api.clearinghouse.net/api-reference/objects/case/causes-of-action#cause_other) for a cause of action not in the Clearinghouse's predefined list or check [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status). ***42 U.S.C. § 1981*** - This law prohibits race-based employment discrimination. ***42 U.S.C. § 1982*** - This law prohibits race-based discrimination in the sale or rental of property. ***42 U.S.C. § 1983*** - This law allows people to bring a lawsuit against persons acting under color of state law for violating federal constitutional or statutory rights. ***42 U.S.C. § 1985*** - This law allows people to bring a lawsuit for three types of conspiracy: (1) preventing an officer from performing their duties, (2) obstructing justice by intimidating a party, witness, or juror, and (3) depriving a person's rights or privileges. ***Administrative Procedure Act, 5 U.S.C. §§ 551 et seq. *** - This law governs federal administrative agencies and how they propose/establish regulations. It has been called a \"constitution\" for administrative law. ***Adoption Assistance and Child Welfare Act of 1980 (AACWA), 42 U.S.C. §§ 620 et seq.*** - This law's purpose was to (1) establish a program of adoption assistance, (2) strengthen foster care assistance, and (3) improve the child welfare, social services, and aid to families with dependent children programs. ***Adoption Assistance Program, 42 U.S.C. §§ 670 et seq.*** - This law gives funding to states to create programs that facilitate the adoption of children who would otherwise remain in long-term foster care. ***Age Discrimination in Employment Act (ADEA), 29 U.S.C. §§ 621 et seq.*** - This law prohibits age-based employment discrimination against people age 40 and older. ***Alien Tort Claims Act (ATCA), 28 U.S.C. §§ 1350*** - This law allows aliens to bring tort claims alleging violations of international law in federal district court. ***All Writs Act, 28 U.S.C. § 1651*** - This law allows courts to issue writs (legal orders). ***Americans with Disabilities Act (ADA), 42 U.S.C. §§ 12111 et seq.*** - This law prohibits discrimination against people with disabilities in employment, government services, public transit, businesses open to the public, telecommunications, and other activities. ***Child Abuse Prevention and Treatment Act, 42 U.S.C. §§ 5101 et seq.*** - This law provides federal funding for programs for prevention, identification, and treatment of child abuse and neglect. It also provides a minimum definition of \"child abuse and neglect.\" ***Civil Rights Act of 1957/1960, 52 U.S.C. § 10101 (previously 42 U.S.C. § 1971)*** - The Civil Rights Act of 1957 was the first post-Reconstruction civil rights law. Among other things, it allowed federal prosecutors to obtain injunctions against interfering with the right to vote (particularly for Black Americans). The Civil Rights Act of 1960 was enacted largely to address the shortcomings of the 1957 law. ***Civil Rights of Institutionalized Persons Act (CRIPA), 42 U.S.C. § 1997 et seq.*** - This law allows the Attorney General of the U.S. to review practices and conditions in state- and local-run prisons and jails. ***Clean Water Act (CWA), 33 U.S.C. § 1319 et seq.*** - This law regulates discharges of pollutants into U.S. waters and quality standards for surface waters. ***Clean Air Act, 42 U.S.C. §7401 et seq.*** - This law regulates air pollution. For example, it requires the EPA to adopt national air quality standards that states then must meet. ***Community Reinvestment Act, 12 U.S.C. § 2901*** - This law requires federal banking agencies to assess how well depository institutions (e.g. banks) are meeting the needs of their communities, including low- and moderate-income communities. ***Criminal Conspiracy to Violate Federal Rights, 18 U.S.C. § 241*** - This law makes it a federal crime to agree with others to violate federal rights while acting in a state capacity. ***Criminal Violation of Federal Rights Under Color of Law, 18 U.S.C. § 242*** - This law makes it a federal crime to violate federal rights while acting in a state capacity. ***Declaratory Judgment Act, 28 U.S.C. § 2201*** - This law allows courts to grant declaratory judgments as relief, but the law does not independently provide a basis for relief. ***Developmental Disabilities Assistance and Bill of Rights Act, 42 U.S.C. § 15001 et seq.*** - This law establishes programs for helping individuals with development disabilities and their families. ***Employee Retirement Income Security Act (ERISA), 29 U.S.C. § 1001*** - This law sets standards for most private retirement and health plans to provide protection for individuals on those plans. ***Endangered Species Act, 16 U.S.C. § 1531 et seq.*** - This law establishes protections for fish, wildlife, and plants that are listed as threatened or endangered; it also manages those lists of threatened or endangered species. ***Equal Credit Opportunity Act (ECOA), 15 U.S.C. § 1691*** - This law prohibits discrimination in activity under the Consumer Credit Protection Act and requires creditors to provide reasons for denying an applicant credit. ***Equal Pay Act, 29 U.S.C. § 206(d)*** - This law requires that men and women in the same workplace be given equal pay for equal work. ***Ex Parte Young (Federal) or Bivens*** - This combination enables damage suits brought against federal officials (see above). ***Ex parte Young (federal or state officials)*** - *Ex parte Young* enables injunctive suits brought against federal officials or state officials (see above). ***Fair Credit Reporting Act, 15 U.S.C. § 1681 (\"FCRA\")*** - This law protects information collected by consumer reporting agencies. ***Fair Housing Act/Fair Housing Amendments Act (FHAA), 42 U.S.C. §§ 3601 et seq.*** - This law prohibits discrimination in housing, covering rentals, sales, mortgages, advertising, and other housing-related activities. ***Fair Labor Standards Act (FLSA), 29 U.S.C. §§ 201-219*** - This law establishes minimum wage, overtime pay, recordkeeping, and youth employment standards. ***False Claims Act, 31 U.S.C. § 3729*** - This law creates a penalty for anyone who knowingly submits, or causes to submit, false claims to the government. ***Federal Campaign Finance law, 2 U.S.C. §§ 431 et seq.*** - This law puts limits on campaign contributions to candidates for president and Congress. ***Federal Tort Claims Act (FTCA), 28 U.S.C. § 2674*** - This law authorizes damage suits against the federal government for torts of its employees. ***FISA Title III Warrant (Physical Search), 50 U.S.C. §§ 1821-1829*** - The Foreign Intelligence Surveillance Act (FISA) provides judicial and congressional oversight of government agencies engaging in foreign intelligence surveillance activities. Title III allows agencies to seek a warrant for physical searches to collect foreign intelligence. ***FISA Title IV order (pen register/trap-and-trace), 50 U.S.C. §§ 1841-1846*** - The Foreign Intelligence Surveillance Act (FISA) provides judicial and congressional oversight of government agencies engaging in foreign intelligence surveillance activities. Title IV allows agencies to seek an order authorizing the installation of pen register and trap-and-trace devices to collect foreign intelligence. ***FISA Title I Warrant (Electronic Surveillance), 50 U.S.C. §§ 1801-1812*** - The Foreign Intelligence Surveillance Act (FISA) provides judicial and congressional oversight of government agencies engaging in foreign intelligence surveillance activities. Title I allows agencies to seek a warrant for electronic surveillance to collect foreign intelligence. ***FISA Title VII targeting order (Sections 702, 703, 704), 50 U.S.C. 1881a, 1881b, 1881c - The Foreign Intelligence Surveillance Act (FISA) provides judicial and congressional oversight of government agencies engaging in foreign intelligence surveillance activities. Section 702 permits foreign intelligence surveillance targeting the communications of non-U.S. persons located abroad without needing to establish probable cause. There is a [special collection](https://clearinghouse.net/search/case/?special_collection=5663) related to this cause of action. ***FISA Title V order (PATRIOT Act § 215, business records or other tangible things), 50 U.S.C. §§ 1861-1862*** - The Foreign Intelligence Surveillance Act (FISA) provides judicial and congressional oversight of government agencies engaging in foreign intelligence surveillance activities. Title V allows agencies to seek an order compelling certain businesses to release records in connection with a foreign intelligence investigation by the FBI. Section 215 of the PATRIOT Act (expired in 2020), expanded business records to include \"any tangible thing.\" ***Freedom of Information Act (FOIA), 5 U.S.C. § 552*** - This law requires disclosure of documents controlled by federal or state governments (or other public authorities) upon request. ***Habeas Corpus, 28 U.S.C. §§ 2241-2253; 2254; 2255*** - This law allows an individual files a civil suit challenging their criminal conviction. Habeas is generally considered an individual's last resort attempt to overturn their sentence. ***Help America Vote Act (HAVA), 52 U.S.C. § 20901 et seq (previously 42 U.S.C. § 15301 et seq)*** - This law addressed improvements to voting systems and voter access that were identified following the 2000 election. ***Illegal Immigration Reform and Immigrant Responsibility Act of 1996 (IIRIRA)*** - This law provides increased penalties for undocumented immigrants who commit crimes while in the U.S., allows for the deportation for undocumented immigrants who commit a misdemeanor or felony, and provides additional restrictions for asylum applications. ***Immigration and Nationality Act (INA), 8 U.S.C. §§ 1101 et seq.*** - This law covers many aspects of immigration law, such as naturalization and refugee assistance. ***Immigration Reform and Control Act of 1986 (IRCA)*** - This law prohibits knowingly employing illegal immigrants. ***Indv. w/ Disab. Educ. Act (IDEA), Educ. of All Handcpd. Children Act , 20 U.S.C. § 1400*** - These laws ensure that children with disabilities have access to free appropriate education, including special education and related services. ***Juvenile Justice Act, 42 U.S.C. § 5672*** - A section of the Juvenile Justice and Delinquency Prevention Act, which supports local and state efforts to prevent delinquency and improve juvenile justice systems. ***Mandamus, 28 U.S.C. § 1361*** - This law authorizes federal courts to compel government employees to do their duty. ***Medicaid, 42 U.S.C §1396 (Title XIX of the Social Security Act)*** - Medicaid provides health coverage to eligible low-income adults, children, pregnant women, elderly adults and people with disabilities. ***Medicare, 42 U.S.C. 1395-1395lll (Title XVIII of the Social Security Act)*** - Medicare provides health coverage to individuals 65 and older, certain younger individuals with disabilities, and those with End-Stage Renal Disease. ***Migrant and Seasonal Agricultural Workers Protection Act, 29 U.S.C. §§ 1801-1871*** - This law protects migrant and seasonal agricultural workers by establishing employment standards related to wages, housing, transportation, disclosures and recordkeeping. ***National Environmental Protection Act, 42 U.S.C. §§ 4321–4370f*** - This law requires federal agencies to assess the environmental effects of their proposed actions prior to making decisions. ***National Labor Relations Act*** - This law provides private-sector employees the fundamental right to seek better working conditions and designation of representation without fear of retaliation. ***National Voter Registration Act (\"Motor Voter law\"), 52 U.S.C. § 20501 (previously 42 U.S.C. § 1973gg)*** - This law requires state governments to offer simplified voter registration processes for any eligible person who applies for or renews a driver's license or applies for public assistance. The law also allows the DOJ to bring civil actions in federal court to enforce its requirements. ***Nursing Care Reform Act of 1987/ Omnibus Reconciliation Act*** - The Nursing Home Reform Act was passed as part of the Omnibus Reconciliation Act of 1987, which establishes performance standards for nursing homes. ***Protection and Advocacy for Individuals with Mental Illness (PAIMI) Act, 42 U.S.C. § 10801*** - This law protects the rights of individuals with mental illnesses. ***Protection and Advocacy of Individual Rights (PAIR), 29 U.S.C. § 794e*** - This law supports the protection and advocacy system in each state to protect the legal and human rights of individuals with disabilities. ***Racketeer Influenced and Corrupt Organizations Act (RICO), 18 U.S.C. §§ 1961 et seq.*** - This law authorizes civil lawsuits for acts performed as part of an ongoing criminal organization. ***Religious Freedom Rest. Act/Religious Land Use and Inst. Persons Act (RFRA/RLUIPA)*** - RFRA provided a \"strict scrutiny\" standard for evaluating generally applicable and neutral laws that pose a burden on someone's religious practice. RLUIPA applied the same principle to state and local governments. ***Resource Conservation and Recovery Act (RCRA), 42 U.S.C. § 6928 et seq.*** - This law the proper management of hazardous and non-hazardous solid waste. ***Section 504 (Rehabilitation Act), 29 U.S.C. § 701*** - This law guarantees certain rights to people with disabilities. ***Social Security (Title XX), 42 U.S.C. §§ 1397 et seq.*** - Also known as the Social Services Block Grant, Title XX provides federal funding to states and territories to support social services for vulnerable children, adults, and families. ***State Anti-Discrimination Law*** - Any state law (as opposed to a federal law) that prohibits discrimination. ***State law*** - Any state law (as opposed to a federal law). ***Title IV, Civil Rights Act of 1964, 42 U.S.C. § 2000c et seq.*** - This law prohibits segregation and discrimination in public school and university systems. It authorizes the U.S. Attorney General to bring enforcement actions. ***Title IX of the Education Amendments of 1972, 20 U.S.C. §§ 1681 et seq.*** - This law prohibits sex (including pregnancy, sexual orientation, and gender identity) discrimination in any education program or activity receiving federal financial assistance. ***Title VI, Civil Rights Act of 1964, 42 U.S.C. § 2000d et seq.*** - This law prohibits discrimination by recipients of federal financial assistance. It authorizes federal agencies to conduct investigations and (in some cases) private individuals to bring lawsuits. ***Title VII (including PDA), 42 U.S.C. § 2000e*** - This law prohibits discrimination in employment on the basis of \"race, color, religion, sex, or national origin.\" It authorizes lawsuits brought by the Equal Employment Opportunity Commission (EEOC), the DOJ, and private individuals. ***Trafficking Victims Protection Act (TVPA), 18 U.S.C. § 1589*** - This law prohibits human trafficking and provides for protection of human trafficking victims. ***Uniformed and Overseas Citizens Absentia Voting Act, 52 U.S.C. § 20301 (previously 42 U.S.C. § 1973ff et seq.)*** - This law requires states and territories to allow absentee voting for members of the U.S. military, their families, and U.S. citizens living abroad. ***Uniformed Services Employment and Reemployment Rights Act (USERRA), 38 U.S.C. § 4301*** - This law prohibits employment discrimination against members of the U.S. military and veterans on the basis of their service. ***Violent Crime and Law Enforcement Act, 34 U.S.C. § 12601 (previously 42 U.S.C. § 14141)*** - This law addresses crime and law enforcement. Among many other things, it defines and classifies various crimes. ***Voting Accessibility law, 52 U.S.C. § 20102 (previously 42 U.S.C. §§ 1973ee et seq.)*** - This law requires accessible polling places in federal elections for elderly individuals and people with disabilities (or alternative means of voting). ***Voting Rights Act, section 203 (language minority provision), 52 U.S.C. § 10503 (previously 42 U.S.C. § 1973aa-1a)*** - This law requires that all election information that is available in English also be available in the language of specific minority communities. ***Voting Rights Act, section 208 (assistance for disabled persons), 52 U.S.C. § 10508 (previously 42 U.S.C. § 1973aa-6)*** - This law provides for voters who need assistance to vote by reason of blindness, disability, or inability to read or write. ***Voting Rights Act, section 2, 52 U.S.C. § 10301 (previously 42 U.S.C. § 1973)*** - This law prohibits voting practices and procedures that discriminate on the basis of race, color or membership in a language minority group. ***Voting Rights Act, section 5, 52 U.S.C. § 10304 (previously 42 U.S.C. § 1973c)*** - This law provides a preclearance requirement whereby changes in voting practices and procedures in certain locations must be found to have no discriminatory purpose or effect before those changes can be put into place. ***Voting Rights Act, unspecified, 52 U.S.C. § 10301 et seq (previously 42 U.S.C § 1973 et seq.)*** - The Voting Rights Act protects the right to vote for minority populations (and was originally enacted to overcome barriers for Black Americans to vote). This option is a catch-all option for provisions that don't have their own option (above). ")
    class_action_granted: Optional[StrictStr] = Field(default=None, description="Whether the court granted the class action. For more information on class actions, see [class_action_sought](https://api.clearinghouse.net/api-reference/objects/case/parties#class_action_sought). ***null*** - This field has not been set yet. This is likely because the case's metadata is not complete – see [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status). ***Granted*** - The court granted the class action. This includes certifying the class for litigation and for just settlement. ***Denied*** - The court denied the class action, and so no class was certified. ***Pending*** - The plaintiffs sought a class action, but the court has not ruled on it (yet). ***Withdrawn*** - The plaintiffs sought a class action, but they withdrew the motion before the court ruled on it. ***Mooted before ruling*** - The plaintiffs sought a class action, but before the court could rule on it, something happened so as to render that decision irrelevant. ***Not sought*** - The plaintiffs did not seek a class action. ***Unknown*** - We don't know if the court granted a class action.")
    class_action_sought: Optional[StrictStr] = Field(default=None, description="Whether a party sought a class action lawsuit. A class action is a type of lawsuit where one or more plaintiffs can sue on behalf of a larger group, known as a \"class.\" As part of a class action, the plaintiffs must ask the court to \"certify\" a class. In rare cases, this may apply to defendants; that is, the court may certify a class for the defendants. ***null*** - This field has not been set yet. This is likely because the case's metadata is not complete – see [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status). ***Yes*** - The plaintiffs sought a class action. ***No*** - The plaintiffs did not seek a class action. ***Unknown*** - We don't know if the plaintiffs sought a class action.")
    closing_year: Optional[StrictInt] = Field(default=None, description="The last year of any activity in a case, in the format YYYY. If terminating_date is not empty, then closing_year should equal the year of terminating_date. See [terminating_date](https://api.clearinghouse.net/api-reference/objects/case/key-dates#terminating_date) for more information.")
    court: Optional[StrictStr] = Field(default=None, description="The court where a case starts. If a case entry concerns litigation that happens in multiple courts (e.g. appeals, consolidations), court remains the first court relevant to the case. There are several types of courts:   ***no court*** - This is for cases where no court was involved, e.g. private out-of-court settlements, U.S. Department of Justice investigations. Ex: No Court    ***state courts*** - Courts part of a state's judicial system. If a case's court is a state court, it must be a court associated with state. Because each state has its own way of organizing courts, we have three generic options for each state: trial court, appellate court, and supreme court. Trial courts are the courts where cases typically start, appellate courts hear cases on appeal, and the supreme court is the highest court in the state. Note: These do NOT necessarily correspond to the names of the courts. For example, \"New York state supreme court\" refers to the New York Court of Appeals, while \"New York state trial court\" refers to the New York Supreme Courts. Ex. Michigan state trial court, Ohio state appellate court, New York state supreme court      ***U.S. district courts*** - The trial courts of the U.S. federal judicial system. Each judicial district covers one U.S. state or one portion of a state. There is at least one judicial district for each state, the District of Columbia, Puerto Rico, Guam, the Northern Mariana Islands, and the Virgin Islands. If a case's court is a U.S. district court, it must be a court associated with state. Ex. District of Massachusetts, District of Columbia, Western District of Washington, Northern District of Illinois, District Court for the Northern Mariana Islands, District Court of the Virgin Islands      ***U.S. appellate courts*** - The intermediate courts of the U.S. federal judicial system. The courts of appeal are divided into 11 numbered circuits, each of which covers multiple states. In addition, there are circuits for the District of Columbia and the Federal Circuit. If a case's court is a U.S. appellate court, it must be a court associated with state. Note: The space between \"U.\" and \"S.\" is a typo that may be fixed in a future update. Ex. U. S. Court of Appeals for the First Circuit, U. S. Court of Appeals for the District of Columbia Circuit, U. S. Court of Appeals for the Federal Circuit      ***U.S. Supreme Court*** - The highest court in the U.S. federal judicial system. Ex: Supreme Court of the United States      ***specialty courts (FISA)*** - The Foreign Intelligence Surveillance Act of 1978 (FISA) established these courts to oversee government requests for foreign intelligence surveillance warrants by federal law enforcement agencies.      ***specialty courts (international trade)*** - This court is for civil cases arising out of U.S. customs and international trade laws.      ***specialty courts (veterans claims)*** - This court receives appeals of decisions by the Board of Veterans' Appeals. This court is part of the U.S. federal judicial system and not part of the Department of Veteran Affairs.      ***specialty courts (multidistrict litigation)*** - Known informally as \"the MDL Panel,\" the JPML oversees the process of transferring similar cases in different districts in order to coordinate or consolidate pretrial proceedings. ")
    custom_issues: Optional[List[StrictStr]] = Field(default=None, description="Case issues that aren't part of the Clearinghouse's predefined choices. For examples of custom issues that have been added to the Clearinghouse, see [Case Custom Issue](https://api.clearinghouse.net/api-reference/endpoints/issues/case-custom-issue).")
    defendant_payment: Optional[StrictStr] = Field(default=None, description="How much the defendants paid as a result of the lawsuit. This is the combined amount for all damages, attorneys' fees, and any other costs. For cases where many payments happen over the course of some period of time (especially attorneys' fees), this value may not include all of the payments. The format of this string varies, but here are some examples of how this string might be formatted: 5000 5000.00 5,000 5,000.00 $5,000 $5,000.00 In addition, sometimes this string contains text when we do not have an exact number. For example: redacted from court transcript roughly $1,000,000   up to $1 billion   If this string is empty, there are a few possible reasons: we do not know how much the defendants paid, the defendants did not pay anything, or the case is still going. Also the case's metadata may not be complete – see case_status. ")
    docket_status: Optional[StrictStr] = Field(default=None, description="The status of the main docket for the case. ***null*** - This field has not been set yet. This is likely because the case's metadata is not complete – see [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status). ***Complete as of retrieval date*** - The docket is complete up to the date it was last retrieved. The docket entries may be present as [Docket Entry](https://api.clearinghouse.net/api-reference/objects/docket-entry) objects or as one of the case's document. ***Incomplete*** - We have only part of the docket. ***None*** - We have no docket for this case. This might be because there is no docket or because we do not have access to the docket.")
    filing_date: Optional[StrictStr] = Field(default=None, description="The date the case was filed, in the format \"YYYY-MM-DD\". This is generally the date of the (first) complaint. If filing_date is empty, we do not know when the case was originally filed or the case was not filed (see [never_filed](https://api.clearinghouse.net/api-reference/objects/case/key-dates#never_filed)). (Also check the [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status).)")
    filing_year: Optional[StrictInt] = Field(default=None, description="The year the case was filed, in the format YYYY. If filing_date is not empty, then filing_year should equal the year of filing_date. See [filing_date](https://api.clearinghouse.net/api-reference/objects/case/key-dates#filing_date) for more information.")
    id: Optional[StrictInt] = Field(default=None, description="The case's ID. Each case's ID is unique.")
    injuction_duration: Optional[StrictInt] = Field(default=None, description="The duration, in months, that an injunction (preliminary or permanent) or temporary restraining order lasted. If injunction_duration is empty, it may be because there was no injunction in the case or because the injunction is ongoing (and has no end date yet).")
    issues: Optional[List[StrictStr]] = Field(default=None, description="An array of issues. Issues are strings that are categorized into buckets based on their relation to others. Each of the following subheaders (for example, \"Reproductive rights\") is one such bucket, and that is reflected in the strings themselves. For example, \"Reproductive rights: Admitting privileges\" corresponds to the issue \"Admitting privileges\" found within the \"Reproductive rights\" bucket. For a full list of issues see [issues](https://api.clearinghouse.net/api-reference/objects/case/issues) ")
    last_checked_date: Optional[StrictStr] = Field(default=None, description="The date that the case was last checked – i.e. the case is up to date as of the last_checked_date. This string is in the format \"YYYY-MM-DDTHH:MM:ssTZ\".")
    main_docket: Optional[Docket] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of the case. Although a case's name may change as the case progresses, we generally do not update this field.")
    never_filed: Optional[StrictBool] = Field(default=None, description="If the case was never filed, this field is True. If never_filed is True, both filing_date and filing_year should be empty.")
    non_docket_case_number: Optional[StrictStr] = Field(default=None, description="A case number associated with the case that is not a docket number. This is often used for U.S. Department of Justice (DOJ) and Equal Employment Opportunity Commission (EEOC) investigations.")
    non_docket_case_number_type: Optional[StrictStr] = Field(default=None, description="***null*** - There is no non-docket case number. ***DJ*** - U.S. Department of Justice ***EEOC*** - U.S. Equal Employment Opportunity Commission ***OCR*** - U.S. Department of Education, Office of Civil Rights ***other*** - The non-docket case number comes from an organization that is not in this list. See [non_docket_case_number_type_other](https://api.clearinghouse.net/api-reference/objects/case/dockets#non_docket_case_number_type_other). ")
    non_docket_case_number_type_other: Optional[StrictStr] = Field(default=None, description="The non-docket case number's type, if non_docket_case_number_type is \"other\". Otherwise, this will be an empty string.")
    order_end_year: Optional[StrictInt] = Field(default=None, description="The last year of an injunction or injunctive-like relief, in the format YYYY. This applies only if there was an injunction or injunctive-like relief in the case. If an injunction is a permanent injunction, then there will be no order_end_year (and [permanent_injunction](https://api.clearinghouse.net/api-reference/objects/case/key-dates#permanent_injunction) will be true). If the injunction was still in effect at the time the case's metadata was updated, then there order_end_year will be empty.")
    order_start_year: Optional[StrictInt] = Field(default=None, description="The first year of an injunction or injunctive-like relief, in the format YYYY. This applies only if there was an injunction or injunctive-like relief in the case.")
    permanent_injuction: Optional[StrictBool] = Field(default=None, description="Whether the injunction or injunctive-like relief was set to last forever (i.e. there is no end date). An injunction is typically a court order requiring a party to do (or stop doing) a specific action. If permanent_injunction is true, then order_end_year will both be empty.")
    plaintiff_description: Optional[StrictStr] = Field(default=None, description="A description of the people or entities that brought the lawsuit. We generally avoid including names of individuals (e.g. \"an incarcerated person\"), but we do sometimes include organization names (e.g. \"U.S. Department of Justice\"). If the plaintiffs sought a class action (see [class_action_sought](https://api.clearinghouse.net/api-reference/objects/case/parties#class_action_sought)), then plaintiff_description is typically the class definition (abridged if necessary).")
    prevailing_party: Optional[StrictStr] = Field(default=None, description="Which party \"won\" the case. This doesn't necessarily have to be by a formal judgment; we also look at what relief has been awarded, whether through court orders or settlements, to determine which party prevailed. ***Plaintiff*** - The plaintiff(s) obtained any sort of relief, even if minor. ***Defendant*** - The defendant(s) prevailed. ***Mixed*** - Both sides received some of what they were hoping for. ***None Yet/None*** - Neither side prevailed or there is no outcome yet. ***Unknown*** - We don't know which side prevailed. If there has been a district court judgment but the case is pending appeal, prevailing_party reflects who won in district court. If this field is an empty array, then the case's metadata is likely not complete – see [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status). ")
    pro_se_status: Optional[StrictStr] = Field(default=None, description="Whether the case had a plaintiff that was pro se. A plaintiff without a lawyer is known as a pro se plaintiff. ***null*** - This field has not been set yet. This is likely because the case's metadata is not complete – see [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status). ***Yes*** - The plaintiff was pro se, i.e. without a lawyer. ***No*** - The plaintiff was not pro se, i.e. represented by a lawyer. ***Unknown*** - We don't know if the plaintiff was represented by a lawyer.")
    public_interest_lawyer: Optional[StrictStr] = Field(default=None, description="Whether any lawyer representing one of the parties is a public interest lawyer. \"Public interest\" encompasses many things, and is generally thought to concern the protection of individual rights, advancement of justice, and improvements for the good of the general public. Government lawyers count if the government is the plaintiff, but not if the government is the defendant. ***null*** - This field has not been set yet. This is likely because the case's metadata is not complete – see [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status). ***Yes*** - At least one lawyer representing one of the parties is a public interest lawyer. ***No*** - No lawyer representing a party is a public interest lawyer. ***Unknown*** - We don't know if the lawyers are public interest lawyers. If there are any organizations in the [attorney_orgs](https://api.clearinghouse.net/api-reference/objects/case/parties#attorney_orgs) array, then public_interest_lawyer will be \"Yes\".")
    relief_natures: Optional[List[StrictStr]] = Field(default=None, description="What kind of relief was awarded in the case. (If a type of relief was sought but denied, it is not included here.) ***Attorneys fees*** - Money awarded to compensate the attorneys on the other side. ***Declaratory Judgment*** - A judgment that states the court's authoritative opinion. Unlike an injunction (below), a declaratory judgment does not require a party to take action or pay money. ***Injunction/Injunctive-like Settlement*** - An injunction is a court order that requires a party to stop or start doing something. An injunctive-like settlement is for when the case settles before an injunction can be issued, but the terms of the settlement require a party to stop or start doing something (likely what the plaintiffs sought an injunction for in the first place). ***Criminal Conviction*** - In a criminal case, a final judgment on a verdict of guilty, a plea of guilty, or a plea of nolo contendere (where a criminal defendant does not accept or deny responsibility for the charges but agrees to accept punishment). ***Damages*** - Money awarded in the case. This can include compensatory damages (to compensate the victim) and punitive damages (to punish the offending party). ***Document/information produced*** - Where the defendant(s) provided the requested documents or information. This is common with Freedom of Information Act (FOIA) cases. ***Habeas relief*** - An individual successfully challenged their criminal conviction and imprisonment in a civil suit. Habeas is generally considered an individual's last resort attempt to overturn their sentence. ***Preliminary injunction/Temp. restraining order*** - An order issued before the final judgment of the case that requires a party to stop or start doing something. ***Warrant/Order allowing surveillance*** - In cases before the Foreign Intelligence Surveillance Court (FISA Court), a warrant or order for electronic surveillance of someone suspected of spying with or for a foreign government. ***None*** - No relief was awarded in the case. ***None yet*** - There could still be relief awarded in the case, but the case is ongoing. ***Unknown*** - We do not know what relief was awarded in the case. If this field is an empty array, then the case's metadata is likely not complete – see [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status).")
    relief_nature_other: Optional[StrictStr] = Field(default=None, description="Types of relief awarded that are not in the Clearinghouse's predefined list. It is rare for a case to have something for this field; in most cases, relief_nature_other will be an empty string.")
    relief_sources: Optional[List[StrictStr]] = Field(default=None, description="The source of the relief awarded in the case. The values \"None\", \"None yet\", and \"Unknown\" correspond to the same options under [relief_natures](https://api.clearinghouse.net/api-reference/objects/case/outcome#relief_natures). ***Litigation*** - The relief was ordered through a court order. ***Settlement*** - The relief was a result of a settlement agreement. ***None*** - No relief was awarded in the case. ***None yet*** - There could still be relief awarded in the case, but the case is ongoing. ***Unknown*** - We do not know what relief was awarded in the case. If this field is an empty array, then the case's metadata is likely not complete – see [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status).")
    settlement_agreement: Optional[List[StrictStr]] = Field(default=None, description="The form of the settlement agreement, if there is one in the case. ***Conditional Dismissal*** - When the plaintiff agrees to dismiss the case if and only if the defendant complies with some settlement terms. If the defendant fails to live up to those terms, the result is the reinstitution of the case. ***Confession of Judgment*** - When the defendant agrees to liability. This is very unusual. ***Court Approved Settlement or Consent Decree*** - If the parties agree to a settlement, and the court issues an order approving it. This is very common. ***Private Settlement Agreement*** - If the parties agree to a settlement that is not approved by the court. The settlement terms are often private. ***Voluntary Dismissal*** - When the plaintiff movees to dismiss the case, and the court grants the motion. This is often done by agreement when the parties settle for monetary damages but no injunction. If there is no settlement agreement in the case, then this field will be an empty array.")
    settlement_judgment_date: Optional[StrictStr] = Field(default=None, description="The date of the first judgment or settlement in the case, in the format \"YYYY-MM-DD\". If settlement_judgment_date is empty, then there may not be a judgment or settlement in the case (yet). (Also check the [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status).)")
    settlement_judgment_year: Optional[StrictInt] = Field(default=None, description="The year of the first judgment or settlement in the case, in the format YYYY. If settlement_judgment_date is not empty, then settlement_judgment_year should equal the year of settlement_judgment_date. See [settlement_judgment_date](https://api.clearinghouse.net/api-reference/objects/case/key-dates#settlement_judgment_date) for more information.")
    special_collections: Optional[List[StrictStr]] = Field(default=None, description="The special collections that a case belongs to. Special collections are pre-tagged groupings of cases that we think might be of particular interest. If the case does not belong to any special collections, special_collections is an empty array. For a full list of possible special collections (with descriptions), see [here](https://clearinghouse.net/collections).")
    state: Optional[StrictStr] = Field(default=None, description="The state in which the case happens. This is typically a U.S. state, but other possible values for this field are U.S. territories, the District of Columbia, \"- International -\", \"- United States (national) -\", and \"Other\". Typically cases occur all in one state, but if a case entry concerns litigation that happens in multiple states, state will be the main state of the case. In cases where there are appeals to courts that cover multiple states (e.g. the Supreme Court of the United States), state is the state where the case originated.")
    summary: Optional[StrictStr] = Field(default=None, description="A summary of the case, formatted in HTML.")
    summary_published_date: Optional[StrictStr] = Field(default=None, description="The date and time that the summary was published, in the format \"YYYY-MM-DDTHH:MM:[ss[.uuuuuu]][TZ]\". The time zone (TZ) will be either -5:00 for Eastern Standard Time or -4:00 for Eastern Daylight Time.")
    summary_short: Optional[StrictStr] = Field(default=None, description="An abridged summary of the case.")
    summary_tiny: Optional[StrictStr] = Field(default=None, description="A 1-2 sentence summary of the case. We use tiny summaries to post tweets on the [Clearinghouse's Twitter account](https://twitter.com/civilrightsch) (where we append a link to the case), so tiny summaries are limited to 257 characters.")
    terminating_date: Optional[StrictStr] = Field(default=None, description="The last date of any activity in a case, in the format \"YYYY-MM-DD\". \"Any activity\" includes things like ongoing injunctions, monitoring, waiting for status reports, and other events that might happen after a judgment has been issued or the parties reach a settlement. If terminating_date is empty, then the case has not ended yet or we do not know when the case ended. (Also check the [case_status](https://api.clearinghouse.net/api-reference/objects/case/case-status#case_status).) If terminating_date is not empty, then case_ongoing should be either \"No\" or \"No reason to think so.\" See [case_ongoing](https://api.clearinghouse.net/api-reference/objects/case/case-details#case_ongoing) for more information.")
    clearinghouse_link: Optional[StrictStr] = Field(default=None, description="The URL to the case on the [Clearinghouse site](https://clearinghouse.net/), which takes the format \"clearinghouse.net/case/{id}\".")
    is_action: Optional[StrictBool] = None
    plaintiff_type: Optional[List[CasePlaintiffTypeInner]] = Field(default=None, description="Issues that fall under [Plaintiff Type](https://api.clearinghouse.net/api-reference/objects/case/issues#plaintiff-type). [Plaintiff Type](https://api.clearinghouse.net/api-reference/objects/case/issues#plaintiff-type) issues appear both in this array and in the issues array. For more information, see [Plaintiff Type](https://api.clearinghouse.net/api-reference/objects/case/issues#plaintiff-type).")
    defendant_type: Optional[List[CasePlaintiffTypeInner]] = Field(default=None, description="Issues that fall under [Defendant-type](https://api.clearinghouse.net/api-reference/objects/case/issues#defendant-type). [Defendant-type](https://api.clearinghouse.net/api-reference/objects/case/issues#defendant-type) issues appear both in this array and in the issues array. For more information, see [Defendant-type](https://api.clearinghouse.net/api-reference/objects/case/issues#defendant-type).")
    facility_type: Optional[List[CasePlaintiffTypeInner]] = Field(default=None, description="Issues that fall under [Type of Facility](https://api.clearinghouse.net/api-reference/objects/case/issues#type-of-facility). [Type of Facility](https://api.clearinghouse.net/api-reference/objects/case/issues#type-of-facility) issues appear both in this array and in the issues array. For more information, see [Type of Facility](https://api.clearinghouse.net/api-reference/objects/case/issues#type-of-facility).")
    constitutional_clause: Optional[List[CasePlaintiffTypeInner]] = Field(default=None, description="Issues that fall under [Constitutional Clause](https://api.clearinghouse.net/api-reference/objects/case/issues#constitutional-clause). [Constitutional Clause](https://api.clearinghouse.net/api-reference/objects/case/issues#constitutional-clause) issues appear both in this array and in the issues array. For more information, see [Constitutional Clause](https://api.clearinghouse.net/api-reference/objects/case/issues#constitutional-clause).")
    special_case_type: Optional[List[CasePlaintiffTypeInner]] = Field(default=None, description="Issues that fall under [Special Case Type](https://api.clearinghouse.net/api-reference/objects/case/issues#special-case-type). [Special Case Type](https://api.clearinghouse.net/api-reference/objects/case/issues#special-case-type) issues appear both in this array and in the issues array. For more information, see [Special Case Type](https://api.clearinghouse.net/api-reference/objects/case/issues#special-case-type).")
    content_of_injunction: Optional[List[CasePlaintiffTypeInner]] = Field(default=None, description="Issues that fall under [Content of Injunction](https://api.clearinghouse.net/api-reference/objects/case/issues#content-of-injunction). [Content of Injunction](https://api.clearinghouse.net/api-reference/objects/case/issues#content-of-injunction) issues appear both in this array and in the issues array. For more information, see [Content of Injunction](https://api.clearinghouse.net/api-reference/objects/case/issues#content-of-injunction).")
    __properties: ClassVar[List[str]] = ["attorney_orgs", "available_documents", "case_defendants", "case_documents", "case_dockets", "case_resources", "case_ongoing", "case_status", "case_types", "cause_other", "causes", "class_action_granted", "class_action_sought", "closing_year", "court", "custom_issues", "defendant_payment", "docket_status", "filing_date", "filing_year", "id", "injuction_duration", "issues", "last_checked_date", "main_docket", "name", "never_filed", "non_docket_case_number", "non_docket_case_number_type", "non_docket_case_number_type_other", "order_end_year", "order_start_year", "permanent_injuction", "plaintiff_description", "prevailing_party", "pro_se_status", "public_interest_lawyer", "relief_natures", "relief_nature_other", "relief_sources", "settlement_agreement", "settlement_judgment_date", "settlement_judgment_year", "special_collections", "state", "summary", "summary_published_date", "summary_short", "summary_tiny", "terminating_date", "clearinghouse_link", "is_action", "plaintiff_type", "defendant_type", "facility_type", "constitutional_clause", "special_case_type", "content_of_injunction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Case from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in case_defendants (list)
        _items = []
        if self.case_defendants:
            for _item_case_defendants in self.case_defendants:
                if _item_case_defendants:
                    _items.append(_item_case_defendants.to_dict())
            _dict['case_defendants'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in case_documents (list)
        _items = []
        if self.case_documents:
            for _item_case_documents in self.case_documents:
                if _item_case_documents:
                    _items.append(_item_case_documents.to_dict())
            _dict['case_documents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in case_dockets (list)
        _items = []
        if self.case_dockets:
            for _item_case_dockets in self.case_dockets:
                if _item_case_dockets:
                    _items.append(_item_case_dockets.to_dict())
            _dict['case_dockets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in case_resources (list)
        _items = []
        if self.case_resources:
            for _item_case_resources in self.case_resources:
                if _item_case_resources:
                    _items.append(_item_case_resources.to_dict())
            _dict['case_resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of main_docket
        if self.main_docket:
            _dict['main_docket'] = self.main_docket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in plaintiff_type (list)
        _items = []
        if self.plaintiff_type:
            for _item_plaintiff_type in self.plaintiff_type:
                if _item_plaintiff_type:
                    _items.append(_item_plaintiff_type.to_dict())
            _dict['plaintiff_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in defendant_type (list)
        _items = []
        if self.defendant_type:
            for _item_defendant_type in self.defendant_type:
                if _item_defendant_type:
                    _items.append(_item_defendant_type.to_dict())
            _dict['defendant_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facility_type (list)
        _items = []
        if self.facility_type:
            for _item_facility_type in self.facility_type:
                if _item_facility_type:
                    _items.append(_item_facility_type.to_dict())
            _dict['facility_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in constitutional_clause (list)
        _items = []
        if self.constitutional_clause:
            for _item_constitutional_clause in self.constitutional_clause:
                if _item_constitutional_clause:
                    _items.append(_item_constitutional_clause.to_dict())
            _dict['constitutional_clause'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in special_case_type (list)
        _items = []
        if self.special_case_type:
            for _item_special_case_type in self.special_case_type:
                if _item_special_case_type:
                    _items.append(_item_special_case_type.to_dict())
            _dict['special_case_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in content_of_injunction (list)
        _items = []
        if self.content_of_injunction:
            for _item_content_of_injunction in self.content_of_injunction:
                if _item_content_of_injunction:
                    _items.append(_item_content_of_injunction.to_dict())
            _dict['content_of_injunction'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Case from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attorney_orgs": obj.get("attorney_orgs"),
            "available_documents": obj.get("available_documents"),
            "case_defendants": [Defendant.from_dict(_item) for _item in obj["case_defendants"]] if obj.get("case_defendants") is not None else None,
            "case_documents": [Document.from_dict(_item) for _item in obj["case_documents"]] if obj.get("case_documents") is not None else None,
            "case_dockets": [Docket.from_dict(_item) for _item in obj["case_dockets"]] if obj.get("case_dockets") is not None else None,
            "case_resources": [Resource.from_dict(_item) for _item in obj["case_resources"]] if obj.get("case_resources") is not None else None,
            "case_ongoing": obj.get("case_ongoing"),
            "case_status": obj.get("case_status"),
            "case_types": obj.get("case_types"),
            "cause_other": obj.get("cause_other"),
            "causes": obj.get("causes"),
            "class_action_granted": obj.get("class_action_granted"),
            "class_action_sought": obj.get("class_action_sought"),
            "closing_year": obj.get("closing_year"),
            "court": obj.get("court"),
            "custom_issues": obj.get("custom_issues"),
            "defendant_payment": obj.get("defendant_payment"),
            "docket_status": obj.get("docket_status"),
            "filing_date": obj.get("filing_date"),
            "filing_year": obj.get("filing_year"),
            "id": obj.get("id"),
            "injuction_duration": obj.get("injuction_duration"),
            "issues": obj.get("issues"),
            "last_checked_date": obj.get("last_checked_date"),
            "main_docket": Docket.from_dict(obj["main_docket"]) if obj.get("main_docket") is not None else None,
            "name": obj.get("name"),
            "never_filed": obj.get("never_filed"),
            "non_docket_case_number": obj.get("non_docket_case_number"),
            "non_docket_case_number_type": obj.get("non_docket_case_number_type"),
            "non_docket_case_number_type_other": obj.get("non_docket_case_number_type_other"),
            "order_end_year": obj.get("order_end_year"),
            "order_start_year": obj.get("order_start_year"),
            "permanent_injuction": obj.get("permanent_injuction"),
            "plaintiff_description": obj.get("plaintiff_description"),
            "prevailing_party": obj.get("prevailing_party"),
            "pro_se_status": obj.get("pro_se_status"),
            "public_interest_lawyer": obj.get("public_interest_lawyer"),
            "relief_natures": obj.get("relief_natures"),
            "relief_nature_other": obj.get("relief_nature_other"),
            "relief_sources": obj.get("relief_sources"),
            "settlement_agreement": obj.get("settlement_agreement"),
            "settlement_judgment_date": obj.get("settlement_judgment_date"),
            "settlement_judgment_year": obj.get("settlement_judgment_year"),
            "special_collections": obj.get("special_collections"),
            "state": obj.get("state"),
            "summary": obj.get("summary"),
            "summary_published_date": obj.get("summary_published_date"),
            "summary_short": obj.get("summary_short"),
            "summary_tiny": obj.get("summary_tiny"),
            "terminating_date": obj.get("terminating_date"),
            "clearinghouse_link": obj.get("clearinghouse_link"),
            "is_action": obj.get("is_action"),
            "plaintiff_type": [CasePlaintiffTypeInner.from_dict(_item) for _item in obj["plaintiff_type"]] if obj.get("plaintiff_type") is not None else None,
            "defendant_type": [CasePlaintiffTypeInner.from_dict(_item) for _item in obj["defendant_type"]] if obj.get("defendant_type") is not None else None,
            "facility_type": [CasePlaintiffTypeInner.from_dict(_item) for _item in obj["facility_type"]] if obj.get("facility_type") is not None else None,
            "constitutional_clause": [CasePlaintiffTypeInner.from_dict(_item) for _item in obj["constitutional_clause"]] if obj.get("constitutional_clause") is not None else None,
            "special_case_type": [CasePlaintiffTypeInner.from_dict(_item) for _item in obj["special_case_type"]] if obj.get("special_case_type") is not None else None,
            "content_of_injunction": [CasePlaintiffTypeInner.from_dict(_item) for _item in obj["content_of_injunction"]] if obj.get("content_of_injunction") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Civil Rights Clearinghouse Simple API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.case_plaintiff_type_inner import CasePlaintiffTypeInner
from openapi_client.models.defendant import Defendant
from openapi_client.models.docket import Docket
from openapi_client.models.document import Document
from openapi_client.models.resource import Resource
from typing import Optional, Set
from typing_extensions import Self

class Case(BaseModel):
    """
    Case
    """ # noqa: E501
    attorney_orgs: Optional[List[StrictStr]] = None
    available_documents: Optional[List[StrictStr]] = None
    case_defendants: Optional[List[Defendant]] = None
    case_documents: Optional[List[Document]] = None
    case_dockets: Optional[List[Docket]] = None
    case_resources: Optional[List[Resource]] = None
    case_ongoing: Optional[StrictStr] = None
    case_status: Optional[StrictStr] = None
    case_types: Optional[List[StrictStr]] = None
    cause_other: Optional[StrictStr] = None
    causes: Optional[List[StrictStr]] = None
    class_action_granted: Optional[StrictStr] = None
    class_action_sought: Optional[StrictStr] = None
    closing_year: Optional[StrictInt] = None
    court: Optional[StrictStr] = None
    custom_issues: Optional[List[StrictStr]] = None
    defendant_payment: Optional[StrictStr] = None
    docket_status: Optional[StrictStr] = None
    filing_date: Optional[StrictStr] = None
    filing_year: Optional[StrictInt] = None
    id: Optional[StrictInt] = None
    injuction_duration: Optional[StrictInt] = None
    issues: Optional[List[StrictStr]] = None
    last_checked_date: Optional[StrictStr] = None
    main_docket: Optional[Docket] = None
    name: Optional[StrictStr] = None
    never_filed: Optional[StrictBool] = None
    non_docket_case_number: Optional[StrictStr] = None
    non_docket_case_number_type: Optional[StrictStr] = None
    non_docket_case_number_type_other: Optional[StrictStr] = None
    order_end_year: Optional[StrictInt] = None
    order_start_year: Optional[StrictInt] = None
    permanent_injuction: Optional[StrictBool] = None
    plaintiff_description: Optional[StrictStr] = None
    prevailing_party: Optional[StrictStr] = None
    pro_se_status: Optional[StrictStr] = None
    public_interest_lawyer: Optional[StrictStr] = None
    relief_natures: Optional[List[StrictStr]] = None
    relief_nature_other: Optional[StrictStr] = None
    relief_sources: Optional[List[StrictStr]] = None
    settlement_agreement: Optional[List[StrictStr]] = None
    settlement_judgment_date: Optional[StrictStr] = None
    settlement_judgment_year: Optional[StrictInt] = None
    special_collections: Optional[List[StrictStr]] = None
    state: Optional[StrictStr] = None
    summary: Optional[StrictStr] = None
    summary_published_date: Optional[StrictStr] = None
    summary_short: Optional[StrictStr] = None
    summary_tiny: Optional[StrictStr] = None
    terminating_date: Optional[StrictStr] = None
    clearinghouse_link: Optional[StrictStr] = None
    is_action: Optional[StrictBool] = None
    plaintiff_type: Optional[List[CasePlaintiffTypeInner]] = None
    defendant_type: Optional[List[CasePlaintiffTypeInner]] = None
    facility_type: Optional[List[CasePlaintiffTypeInner]] = None
    constitutional_clause: Optional[List[CasePlaintiffTypeInner]] = None
    special_case_type: Optional[List[CasePlaintiffTypeInner]] = None
    content_of_injunction: Optional[List[CasePlaintiffTypeInner]] = None
    __properties: ClassVar[List[str]] = ["attorney_orgs", "available_documents", "case_defendants", "case_documents", "case_dockets", "case_resources", "case_ongoing", "case_status", "case_types", "cause_other", "causes", "class_action_granted", "class_action_sought", "closing_year", "court", "custom_issues", "defendant_payment", "docket_status", "filing_date", "filing_year", "id", "injuction_duration", "issues", "last_checked_date", "main_docket", "name", "never_filed", "non_docket_case_number", "non_docket_case_number_type", "non_docket_case_number_type_other", "order_end_year", "order_start_year", "permanent_injuction", "plaintiff_description", "prevailing_party", "pro_se_status", "public_interest_lawyer", "relief_natures", "relief_nature_other", "relief_sources", "settlement_agreement", "settlement_judgment_date", "settlement_judgment_year", "special_collections", "state", "summary", "summary_published_date", "summary_short", "summary_tiny", "terminating_date", "clearinghouse_link", "is_action", "plaintiff_type", "defendant_type", "facility_type", "constitutional_clause", "special_case_type", "content_of_injunction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Case from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in case_defendants (list)
        _items = []
        if self.case_defendants:
            for _item_case_defendants in self.case_defendants:
                if _item_case_defendants:
                    _items.append(_item_case_defendants.to_dict())
            _dict['case_defendants'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in case_documents (list)
        _items = []
        if self.case_documents:
            for _item_case_documents in self.case_documents:
                if _item_case_documents:
                    _items.append(_item_case_documents.to_dict())
            _dict['case_documents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in case_dockets (list)
        _items = []
        if self.case_dockets:
            for _item_case_dockets in self.case_dockets:
                if _item_case_dockets:
                    _items.append(_item_case_dockets.to_dict())
            _dict['case_dockets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in case_resources (list)
        _items = []
        if self.case_resources:
            for _item_case_resources in self.case_resources:
                if _item_case_resources:
                    _items.append(_item_case_resources.to_dict())
            _dict['case_resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of main_docket
        if self.main_docket:
            _dict['main_docket'] = self.main_docket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in plaintiff_type (list)
        _items = []
        if self.plaintiff_type:
            for _item_plaintiff_type in self.plaintiff_type:
                if _item_plaintiff_type:
                    _items.append(_item_plaintiff_type.to_dict())
            _dict['plaintiff_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in defendant_type (list)
        _items = []
        if self.defendant_type:
            for _item_defendant_type in self.defendant_type:
                if _item_defendant_type:
                    _items.append(_item_defendant_type.to_dict())
            _dict['defendant_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facility_type (list)
        _items = []
        if self.facility_type:
            for _item_facility_type in self.facility_type:
                if _item_facility_type:
                    _items.append(_item_facility_type.to_dict())
            _dict['facility_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in constitutional_clause (list)
        _items = []
        if self.constitutional_clause:
            for _item_constitutional_clause in self.constitutional_clause:
                if _item_constitutional_clause:
                    _items.append(_item_constitutional_clause.to_dict())
            _dict['constitutional_clause'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in special_case_type (list)
        _items = []
        if self.special_case_type:
            for _item_special_case_type in self.special_case_type:
                if _item_special_case_type:
                    _items.append(_item_special_case_type.to_dict())
            _dict['special_case_type'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in content_of_injunction (list)
        _items = []
        if self.content_of_injunction:
            for _item_content_of_injunction in self.content_of_injunction:
                if _item_content_of_injunction:
                    _items.append(_item_content_of_injunction.to_dict())
            _dict['content_of_injunction'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Case from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attorney_orgs": obj.get("attorney_orgs"),
            "available_documents": obj.get("available_documents"),
            "case_defendants": [Defendant.from_dict(_item) for _item in obj["case_defendants"]] if obj.get("case_defendants") is not None else None,
            "case_documents": [Document.from_dict(_item) for _item in obj["case_documents"]] if obj.get("case_documents") is not None else None,
            "case_dockets": [Docket.from_dict(_item) for _item in obj["case_dockets"]] if obj.get("case_dockets") is not None else None,
            "case_resources": [Resource.from_dict(_item) for _item in obj["case_resources"]] if obj.get("case_resources") is not None else None,
            "case_ongoing": obj.get("case_ongoing"),
            "case_status": obj.get("case_status"),
            "case_types": obj.get("case_types"),
            "cause_other": obj.get("cause_other"),
            "causes": obj.get("causes"),
            "class_action_granted": obj.get("class_action_granted"),
            "class_action_sought": obj.get("class_action_sought"),
            "closing_year": obj.get("closing_year"),
            "court": obj.get("court"),
            "custom_issues": obj.get("custom_issues"),
            "defendant_payment": obj.get("defendant_payment"),
            "docket_status": obj.get("docket_status"),
            "filing_date": obj.get("filing_date"),
            "filing_year": obj.get("filing_year"),
            "id": obj.get("id"),
            "injuction_duration": obj.get("injuction_duration"),
            "issues": obj.get("issues"),
            "last_checked_date": obj.get("last_checked_date"),
            "main_docket": Docket.from_dict(obj["main_docket"]) if obj.get("main_docket") is not None else None,
            "name": obj.get("name"),
            "never_filed": obj.get("never_filed"),
            "non_docket_case_number": obj.get("non_docket_case_number"),
            "non_docket_case_number_type": obj.get("non_docket_case_number_type"),
            "non_docket_case_number_type_other": obj.get("non_docket_case_number_type_other"),
            "order_end_year": obj.get("order_end_year"),
            "order_start_year": obj.get("order_start_year"),
            "permanent_injuction": obj.get("permanent_injuction"),
            "plaintiff_description": obj.get("plaintiff_description"),
            "prevailing_party": obj.get("prevailing_party"),
            "pro_se_status": obj.get("pro_se_status"),
            "public_interest_lawyer": obj.get("public_interest_lawyer"),
            "relief_natures": obj.get("relief_natures"),
            "relief_nature_other": obj.get("relief_nature_other"),
            "relief_sources": obj.get("relief_sources"),
            "settlement_agreement": obj.get("settlement_agreement"),
            "settlement_judgment_date": obj.get("settlement_judgment_date"),
            "settlement_judgment_year": obj.get("settlement_judgment_year"),
            "special_collections": obj.get("special_collections"),
            "state": obj.get("state"),
            "summary": obj.get("summary"),
            "summary_published_date": obj.get("summary_published_date"),
            "summary_short": obj.get("summary_short"),
            "summary_tiny": obj.get("summary_tiny"),
            "terminating_date": obj.get("terminating_date"),
            "clearinghouse_link": obj.get("clearinghouse_link"),
            "is_action": obj.get("is_action"),
            "plaintiff_type": [CasePlaintiffTypeInner.from_dict(_item) for _item in obj["plaintiff_type"]] if obj.get("plaintiff_type") is not None else None,
            "defendant_type": [CasePlaintiffTypeInner.from_dict(_item) for _item in obj["defendant_type"]] if obj.get("defendant_type") is not None else None,
            "facility_type": [CasePlaintiffTypeInner.from_dict(_item) for _item in obj["facility_type"]] if obj.get("facility_type") is not None else None,
            "constitutional_clause": [CasePlaintiffTypeInner.from_dict(_item) for _item in obj["constitutional_clause"]] if obj.get("constitutional_clause") is not None else None,
            "special_case_type": [CasePlaintiffTypeInner.from_dict(_item) for _item in obj["special_case_type"]] if obj.get("special_case_type") is not None else None,
            "content_of_injunction": [CasePlaintiffTypeInner.from_dict(_item) for _item in obj["content_of_injunction"]] if obj.get("content_of_injunction") is not None else None
        })
        return _obj



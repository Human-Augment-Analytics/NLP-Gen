# coding: utf-8

"""
    Civil Rights Clearinghouse Simple API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Resource(BaseModel):
    """
    Resource
    """ # noqa: E501
    file: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    author_role: Optional[StrictStr] = None
    abstract: Optional[StrictStr] = None
    author: Optional[StrictStr] = None
    institution: Optional[StrictStr] = None
    citation: Optional[StrictStr] = None
    external_url: Optional[StrictStr] = None
    display_date: Optional[StrictStr] = None
    resource_type: Optional[List[StrictStr]] = None
    cases: Optional[List[StrictStr]] = None
    case_types: Optional[List[StrictStr]] = None
    var_date: Optional[StrictStr] = Field(default=None, alias="date")
    causes: Optional[List[StrictStr]] = None
    issues: Optional[List[StrictStr]] = None
    special_collections: Optional[List[StrictStr]] = None
    attorney_orgs: Optional[List[StrictStr]] = None
    source: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["file", "title", "author_role", "abstract", "author", "institution", "citation", "external_url", "display_date", "resource_type", "cases", "case_types", "date", "causes", "issues", "special_collections", "attorney_orgs", "source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Resource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Resource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "file": obj.get("file"),
            "title": obj.get("title"),
            "author_role": obj.get("author_role"),
            "abstract": obj.get("abstract"),
            "author": obj.get("author"),
            "institution": obj.get("institution"),
            "citation": obj.get("citation"),
            "external_url": obj.get("external_url"),
            "display_date": obj.get("display_date"),
            "resource_type": obj.get("resource_type"),
            "cases": obj.get("cases"),
            "case_types": obj.get("case_types"),
            "date": obj.get("date"),
            "causes": obj.get("causes"),
            "issues": obj.get("issues"),
            "special_collections": obj.get("special_collections"),
            "attorney_orgs": obj.get("attorney_orgs"),
            "source": obj.get("source")
        })
        return _obj



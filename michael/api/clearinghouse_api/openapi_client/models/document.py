# coding: utf-8

"""
    Civil Rights Clearinghouse Simple API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Document(BaseModel):
    """
    Document
    """ # noqa: E501
    var_date: Optional[StrictStr] = Field(default=None, alias="date")
    date_is_estimate: Optional[StrictBool] = None
    date_not_available: Optional[StrictBool] = None
    description: Optional[StrictStr] = None
    document_source: Optional[StrictStr] = None
    document_type: Optional[StrictStr] = None
    order_type: Optional[StrictStr] = None
    citation_paren: Optional[StrictStr] = None
    cite_1_page: Optional[StrictInt] = None
    cite_1_reporter: Optional[StrictStr] = None
    cite_1_vol: Optional[StrictInt] = None
    cite_2_page: Optional[StrictInt] = None
    cite_2_reporter: Optional[StrictStr] = None
    cite_2_vol: Optional[StrictInt] = None
    cite_3_page: Optional[StrictInt] = None
    cite_3_reporter: Optional[StrictStr] = None
    cite_3_vol: Optional[StrictInt] = None
    citation_status: Optional[StrictStr] = None
    court: Optional[StrictStr] = None
    no_title: Optional[StrictBool] = None
    party_types: Optional[List[StrictStr]] = None
    per_curium: Optional[StrictBool] = None
    is_core_document: Optional[StrictBool] = None
    file: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    public_note: Optional[StrictStr] = None
    document_type_other: Optional[StrictStr] = None
    external_url: Optional[StrictStr] = None
    ecf_number: Optional[StrictStr] = None
    clearinghouse_link: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    document_status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["date", "date_is_estimate", "date_not_available", "description", "document_source", "document_type", "order_type", "citation_paren", "cite_1_page", "cite_1_reporter", "cite_1_vol", "cite_2_page", "cite_2_reporter", "cite_2_vol", "cite_3_page", "cite_3_reporter", "cite_3_vol", "citation_status", "court", "no_title", "party_types", "per_curium", "is_core_document", "file", "title", "public_note", "document_type_other", "external_url", "ecf_number", "clearinghouse_link", "id", "document_status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Document from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Document from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "date_is_estimate": obj.get("date_is_estimate"),
            "date_not_available": obj.get("date_not_available"),
            "description": obj.get("description"),
            "document_source": obj.get("document_source"),
            "document_type": obj.get("document_type"),
            "order_type": obj.get("order_type"),
            "citation_paren": obj.get("citation_paren"),
            "cite_1_page": obj.get("cite_1_page"),
            "cite_1_reporter": obj.get("cite_1_reporter"),
            "cite_1_vol": obj.get("cite_1_vol"),
            "cite_2_page": obj.get("cite_2_page"),
            "cite_2_reporter": obj.get("cite_2_reporter"),
            "cite_2_vol": obj.get("cite_2_vol"),
            "cite_3_page": obj.get("cite_3_page"),
            "cite_3_reporter": obj.get("cite_3_reporter"),
            "cite_3_vol": obj.get("cite_3_vol"),
            "citation_status": obj.get("citation_status"),
            "court": obj.get("court"),
            "no_title": obj.get("no_title"),
            "party_types": obj.get("party_types"),
            "per_curium": obj.get("per_curium"),
            "is_core_document": obj.get("is_core_document"),
            "file": obj.get("file"),
            "title": obj.get("title"),
            "public_note": obj.get("public_note"),
            "document_type_other": obj.get("document_type_other"),
            "external_url": obj.get("external_url"),
            "ecf_number": obj.get("ecf_number"),
            "clearinghouse_link": obj.get("clearinghouse_link"),
            "id": obj.get("id"),
            "document_status": obj.get("document_status")
        })
        return _obj



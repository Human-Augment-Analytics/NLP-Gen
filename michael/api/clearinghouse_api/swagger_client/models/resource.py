# coding: utf-8

"""
    Civil Rights Clearinghouse Simple API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Resource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file': 'str',
        'title': 'str',
        'author_role': 'str',
        'abstract': 'str',
        'author': 'str',
        'institution': 'str',
        'citation': 'str',
        'external_url': 'str',
        'display_date': 'str',
        'resource_type': 'list[str]',
        'cases': 'list[str]',
        'case_types': 'list[str]',
        '_date': 'str',
        'causes': 'list[str]',
        'issues': 'list[str]',
        'special_collections': 'list[str]',
        'attorney_orgs': 'list[str]',
        'source': 'str'
    }

    attribute_map = {
        'file': 'file',
        'title': 'title',
        'author_role': 'author_role',
        'abstract': 'abstract',
        'author': 'author',
        'institution': 'institution',
        'citation': 'citation',
        'external_url': 'external_url',
        'display_date': 'display_date',
        'resource_type': 'resource_type',
        'cases': 'cases',
        'case_types': 'case_types',
        '_date': 'date',
        'causes': 'causes',
        'issues': 'issues',
        'special_collections': 'special_collections',
        'attorney_orgs': 'attorney_orgs',
        'source': 'source'
    }

    def __init__(self, file=None, title=None, author_role=None, abstract=None, author=None, institution=None, citation=None, external_url=None, display_date=None, resource_type=None, cases=None, case_types=None, _date=None, causes=None, issues=None, special_collections=None, attorney_orgs=None, source=None):  # noqa: E501
        """Resource - a model defined in Swagger"""  # noqa: E501
        self._file = None
        self._title = None
        self._author_role = None
        self._abstract = None
        self._author = None
        self._institution = None
        self._citation = None
        self._external_url = None
        self._display_date = None
        self._resource_type = None
        self._cases = None
        self._case_types = None
        self.__date = None
        self._causes = None
        self._issues = None
        self._special_collections = None
        self._attorney_orgs = None
        self._source = None
        self.discriminator = None
        if file is not None:
            self.file = file
        if title is not None:
            self.title = title
        if author_role is not None:
            self.author_role = author_role
        if abstract is not None:
            self.abstract = abstract
        if author is not None:
            self.author = author
        if institution is not None:
            self.institution = institution
        if citation is not None:
            self.citation = citation
        if external_url is not None:
            self.external_url = external_url
        if display_date is not None:
            self.display_date = display_date
        if resource_type is not None:
            self.resource_type = resource_type
        if cases is not None:
            self.cases = cases
        if case_types is not None:
            self.case_types = case_types
        if _date is not None:
            self._date = _date
        if causes is not None:
            self.causes = causes
        if issues is not None:
            self.issues = issues
        if special_collections is not None:
            self.special_collections = special_collections
        if attorney_orgs is not None:
            self.attorney_orgs = attorney_orgs
        if source is not None:
            self.source = source

    @property
    def file(self):
        """Gets the file of this Resource.  # noqa: E501


        :return: The file of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this Resource.


        :param file: The file of this Resource.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def title(self):
        """Gets the title of this Resource.  # noqa: E501


        :return: The title of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Resource.


        :param title: The title of this Resource.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def author_role(self):
        """Gets the author_role of this Resource.  # noqa: E501


        :return: The author_role of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._author_role

    @author_role.setter
    def author_role(self, author_role):
        """Sets the author_role of this Resource.


        :param author_role: The author_role of this Resource.  # noqa: E501
        :type: str
        """

        self._author_role = author_role

    @property
    def abstract(self):
        """Gets the abstract of this Resource.  # noqa: E501


        :return: The abstract of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this Resource.


        :param abstract: The abstract of this Resource.  # noqa: E501
        :type: str
        """

        self._abstract = abstract

    @property
    def author(self):
        """Gets the author of this Resource.  # noqa: E501


        :return: The author of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Resource.


        :param author: The author of this Resource.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def institution(self):
        """Gets the institution of this Resource.  # noqa: E501


        :return: The institution of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this Resource.


        :param institution: The institution of this Resource.  # noqa: E501
        :type: str
        """

        self._institution = institution

    @property
    def citation(self):
        """Gets the citation of this Resource.  # noqa: E501


        :return: The citation of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this Resource.


        :param citation: The citation of this Resource.  # noqa: E501
        :type: str
        """

        self._citation = citation

    @property
    def external_url(self):
        """Gets the external_url of this Resource.  # noqa: E501


        :return: The external_url of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this Resource.


        :param external_url: The external_url of this Resource.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def display_date(self):
        """Gets the display_date of this Resource.  # noqa: E501


        :return: The display_date of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._display_date

    @display_date.setter
    def display_date(self, display_date):
        """Sets the display_date of this Resource.


        :param display_date: The display_date of this Resource.  # noqa: E501
        :type: str
        """

        self._display_date = display_date

    @property
    def resource_type(self):
        """Gets the resource_type of this Resource.  # noqa: E501


        :return: The resource_type of this Resource.  # noqa: E501
        :rtype: list[str]
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Resource.


        :param resource_type: The resource_type of this Resource.  # noqa: E501
        :type: list[str]
        """

        self._resource_type = resource_type

    @property
    def cases(self):
        """Gets the cases of this Resource.  # noqa: E501


        :return: The cases of this Resource.  # noqa: E501
        :rtype: list[str]
        """
        return self._cases

    @cases.setter
    def cases(self, cases):
        """Sets the cases of this Resource.


        :param cases: The cases of this Resource.  # noqa: E501
        :type: list[str]
        """

        self._cases = cases

    @property
    def case_types(self):
        """Gets the case_types of this Resource.  # noqa: E501


        :return: The case_types of this Resource.  # noqa: E501
        :rtype: list[str]
        """
        return self._case_types

    @case_types.setter
    def case_types(self, case_types):
        """Sets the case_types of this Resource.


        :param case_types: The case_types of this Resource.  # noqa: E501
        :type: list[str]
        """

        self._case_types = case_types

    @property
    def _date(self):
        """Gets the _date of this Resource.  # noqa: E501


        :return: The _date of this Resource.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Resource.


        :param _date: The _date of this Resource.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def causes(self):
        """Gets the causes of this Resource.  # noqa: E501


        :return: The causes of this Resource.  # noqa: E501
        :rtype: list[str]
        """
        return self._causes

    @causes.setter
    def causes(self, causes):
        """Sets the causes of this Resource.


        :param causes: The causes of this Resource.  # noqa: E501
        :type: list[str]
        """

        self._causes = causes

    @property
    def issues(self):
        """Gets the issues of this Resource.  # noqa: E501


        :return: The issues of this Resource.  # noqa: E501
        :rtype: list[str]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this Resource.


        :param issues: The issues of this Resource.  # noqa: E501
        :type: list[str]
        """

        self._issues = issues

    @property
    def special_collections(self):
        """Gets the special_collections of this Resource.  # noqa: E501


        :return: The special_collections of this Resource.  # noqa: E501
        :rtype: list[str]
        """
        return self._special_collections

    @special_collections.setter
    def special_collections(self, special_collections):
        """Sets the special_collections of this Resource.


        :param special_collections: The special_collections of this Resource.  # noqa: E501
        :type: list[str]
        """

        self._special_collections = special_collections

    @property
    def attorney_orgs(self):
        """Gets the attorney_orgs of this Resource.  # noqa: E501


        :return: The attorney_orgs of this Resource.  # noqa: E501
        :rtype: list[str]
        """
        return self._attorney_orgs

    @attorney_orgs.setter
    def attorney_orgs(self, attorney_orgs):
        """Sets the attorney_orgs of this Resource.


        :param attorney_orgs: The attorney_orgs of this Resource.  # noqa: E501
        :type: list[str]
        """

        self._attorney_orgs = attorney_orgs

    @property
    def source(self):
        """Gets the source of this Resource.  # noqa: E501


        :return: The source of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Resource.


        :param source: The source of this Resource.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Resource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

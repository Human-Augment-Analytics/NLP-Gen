# coding: utf-8

"""
    Civil Rights Clearinghouse Simple API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'date_is_estimate': 'bool',
        'date_not_available': 'bool',
        'description': 'str',
        'document_source': 'str',
        'document_type': 'str',
        'order_type': 'str',
        'citation_paren': 'str',
        'cite_1_page': 'int',
        'cite_1_reporter': 'str',
        'cite_1_vol': 'int',
        'cite_2_page': 'int',
        'cite_2_reporter': 'str',
        'cite_2_vol': 'int',
        'cite_3_page': 'int',
        'cite_3_reporter': 'str',
        'cite_3_vol': 'int',
        'citation_status': 'str',
        'court': 'str',
        'no_title': 'bool',
        'party_types': 'list[str]',
        'per_curium': 'bool',
        'is_core_document': 'bool',
        'file': 'str',
        'title': 'str',
        'public_note': 'str',
        'document_type_other': 'str',
        'external_url': 'str',
        'ecf_number': 'str',
        'clearinghouse_link': 'str',
        'id': 'int',
        'document_status': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'date_is_estimate': 'date_is_estimate',
        'date_not_available': 'date_not_available',
        'description': 'description',
        'document_source': 'document_source',
        'document_type': 'document_type',
        'order_type': 'order_type',
        'citation_paren': 'citation_paren',
        'cite_1_page': 'cite_1_page',
        'cite_1_reporter': 'cite_1_reporter',
        'cite_1_vol': 'cite_1_vol',
        'cite_2_page': 'cite_2_page',
        'cite_2_reporter': 'cite_2_reporter',
        'cite_2_vol': 'cite_2_vol',
        'cite_3_page': 'cite_3_page',
        'cite_3_reporter': 'cite_3_reporter',
        'cite_3_vol': 'cite_3_vol',
        'citation_status': 'citation_status',
        'court': 'court',
        'no_title': 'no_title',
        'party_types': 'party_types',
        'per_curium': 'per_curium',
        'is_core_document': 'is_core_document',
        'file': 'file',
        'title': 'title',
        'public_note': 'public_note',
        'document_type_other': 'document_type_other',
        'external_url': 'external_url',
        'ecf_number': 'ecf_number',
        'clearinghouse_link': 'clearinghouse_link',
        'id': 'id',
        'document_status': 'document_status'
    }

    def __init__(self, _date=None, date_is_estimate=None, date_not_available=None, description=None, document_source=None, document_type=None, order_type=None, citation_paren=None, cite_1_page=None, cite_1_reporter=None, cite_1_vol=None, cite_2_page=None, cite_2_reporter=None, cite_2_vol=None, cite_3_page=None, cite_3_reporter=None, cite_3_vol=None, citation_status=None, court=None, no_title=None, party_types=None, per_curium=None, is_core_document=None, file=None, title=None, public_note=None, document_type_other=None, external_url=None, ecf_number=None, clearinghouse_link=None, id=None, document_status=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._date_is_estimate = None
        self._date_not_available = None
        self._description = None
        self._document_source = None
        self._document_type = None
        self._order_type = None
        self._citation_paren = None
        self._cite_1_page = None
        self._cite_1_reporter = None
        self._cite_1_vol = None
        self._cite_2_page = None
        self._cite_2_reporter = None
        self._cite_2_vol = None
        self._cite_3_page = None
        self._cite_3_reporter = None
        self._cite_3_vol = None
        self._citation_status = None
        self._court = None
        self._no_title = None
        self._party_types = None
        self._per_curium = None
        self._is_core_document = None
        self._file = None
        self._title = None
        self._public_note = None
        self._document_type_other = None
        self._external_url = None
        self._ecf_number = None
        self._clearinghouse_link = None
        self._id = None
        self._document_status = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if date_is_estimate is not None:
            self.date_is_estimate = date_is_estimate
        if date_not_available is not None:
            self.date_not_available = date_not_available
        if description is not None:
            self.description = description
        if document_source is not None:
            self.document_source = document_source
        if document_type is not None:
            self.document_type = document_type
        if order_type is not None:
            self.order_type = order_type
        if citation_paren is not None:
            self.citation_paren = citation_paren
        if cite_1_page is not None:
            self.cite_1_page = cite_1_page
        if cite_1_reporter is not None:
            self.cite_1_reporter = cite_1_reporter
        if cite_1_vol is not None:
            self.cite_1_vol = cite_1_vol
        if cite_2_page is not None:
            self.cite_2_page = cite_2_page
        if cite_2_reporter is not None:
            self.cite_2_reporter = cite_2_reporter
        if cite_2_vol is not None:
            self.cite_2_vol = cite_2_vol
        if cite_3_page is not None:
            self.cite_3_page = cite_3_page
        if cite_3_reporter is not None:
            self.cite_3_reporter = cite_3_reporter
        if cite_3_vol is not None:
            self.cite_3_vol = cite_3_vol
        if citation_status is not None:
            self.citation_status = citation_status
        if court is not None:
            self.court = court
        if no_title is not None:
            self.no_title = no_title
        if party_types is not None:
            self.party_types = party_types
        if per_curium is not None:
            self.per_curium = per_curium
        if is_core_document is not None:
            self.is_core_document = is_core_document
        if file is not None:
            self.file = file
        if title is not None:
            self.title = title
        if public_note is not None:
            self.public_note = public_note
        if document_type_other is not None:
            self.document_type_other = document_type_other
        if external_url is not None:
            self.external_url = external_url
        if ecf_number is not None:
            self.ecf_number = ecf_number
        if clearinghouse_link is not None:
            self.clearinghouse_link = clearinghouse_link
        if id is not None:
            self.id = id
        if document_status is not None:
            self.document_status = document_status

    @property
    def _date(self):
        """Gets the _date of this Document.  # noqa: E501


        :return: The _date of this Document.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Document.


        :param _date: The _date of this Document.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def date_is_estimate(self):
        """Gets the date_is_estimate of this Document.  # noqa: E501


        :return: The date_is_estimate of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._date_is_estimate

    @date_is_estimate.setter
    def date_is_estimate(self, date_is_estimate):
        """Sets the date_is_estimate of this Document.


        :param date_is_estimate: The date_is_estimate of this Document.  # noqa: E501
        :type: bool
        """

        self._date_is_estimate = date_is_estimate

    @property
    def date_not_available(self):
        """Gets the date_not_available of this Document.  # noqa: E501


        :return: The date_not_available of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._date_not_available

    @date_not_available.setter
    def date_not_available(self, date_not_available):
        """Sets the date_not_available of this Document.


        :param date_not_available: The date_not_available of this Document.  # noqa: E501
        :type: bool
        """

        self._date_not_available = date_not_available

    @property
    def description(self):
        """Gets the description of this Document.  # noqa: E501


        :return: The description of this Document.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Document.


        :param description: The description of this Document.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def document_source(self):
        """Gets the document_source of this Document.  # noqa: E501


        :return: The document_source of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_source

    @document_source.setter
    def document_source(self, document_source):
        """Sets the document_source of this Document.


        :param document_source: The document_source of this Document.  # noqa: E501
        :type: str
        """

        self._document_source = document_source

    @property
    def document_type(self):
        """Gets the document_type of this Document.  # noqa: E501


        :return: The document_type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this Document.


        :param document_type: The document_type of this Document.  # noqa: E501
        :type: str
        """

        self._document_type = document_type

    @property
    def order_type(self):
        """Gets the order_type of this Document.  # noqa: E501


        :return: The order_type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this Document.


        :param order_type: The order_type of this Document.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def citation_paren(self):
        """Gets the citation_paren of this Document.  # noqa: E501


        :return: The citation_paren of this Document.  # noqa: E501
        :rtype: str
        """
        return self._citation_paren

    @citation_paren.setter
    def citation_paren(self, citation_paren):
        """Sets the citation_paren of this Document.


        :param citation_paren: The citation_paren of this Document.  # noqa: E501
        :type: str
        """

        self._citation_paren = citation_paren

    @property
    def cite_1_page(self):
        """Gets the cite_1_page of this Document.  # noqa: E501


        :return: The cite_1_page of this Document.  # noqa: E501
        :rtype: int
        """
        return self._cite_1_page

    @cite_1_page.setter
    def cite_1_page(self, cite_1_page):
        """Sets the cite_1_page of this Document.


        :param cite_1_page: The cite_1_page of this Document.  # noqa: E501
        :type: int
        """

        self._cite_1_page = cite_1_page

    @property
    def cite_1_reporter(self):
        """Gets the cite_1_reporter of this Document.  # noqa: E501


        :return: The cite_1_reporter of this Document.  # noqa: E501
        :rtype: str
        """
        return self._cite_1_reporter

    @cite_1_reporter.setter
    def cite_1_reporter(self, cite_1_reporter):
        """Sets the cite_1_reporter of this Document.


        :param cite_1_reporter: The cite_1_reporter of this Document.  # noqa: E501
        :type: str
        """

        self._cite_1_reporter = cite_1_reporter

    @property
    def cite_1_vol(self):
        """Gets the cite_1_vol of this Document.  # noqa: E501


        :return: The cite_1_vol of this Document.  # noqa: E501
        :rtype: int
        """
        return self._cite_1_vol

    @cite_1_vol.setter
    def cite_1_vol(self, cite_1_vol):
        """Sets the cite_1_vol of this Document.


        :param cite_1_vol: The cite_1_vol of this Document.  # noqa: E501
        :type: int
        """

        self._cite_1_vol = cite_1_vol

    @property
    def cite_2_page(self):
        """Gets the cite_2_page of this Document.  # noqa: E501


        :return: The cite_2_page of this Document.  # noqa: E501
        :rtype: int
        """
        return self._cite_2_page

    @cite_2_page.setter
    def cite_2_page(self, cite_2_page):
        """Sets the cite_2_page of this Document.


        :param cite_2_page: The cite_2_page of this Document.  # noqa: E501
        :type: int
        """

        self._cite_2_page = cite_2_page

    @property
    def cite_2_reporter(self):
        """Gets the cite_2_reporter of this Document.  # noqa: E501


        :return: The cite_2_reporter of this Document.  # noqa: E501
        :rtype: str
        """
        return self._cite_2_reporter

    @cite_2_reporter.setter
    def cite_2_reporter(self, cite_2_reporter):
        """Sets the cite_2_reporter of this Document.


        :param cite_2_reporter: The cite_2_reporter of this Document.  # noqa: E501
        :type: str
        """

        self._cite_2_reporter = cite_2_reporter

    @property
    def cite_2_vol(self):
        """Gets the cite_2_vol of this Document.  # noqa: E501


        :return: The cite_2_vol of this Document.  # noqa: E501
        :rtype: int
        """
        return self._cite_2_vol

    @cite_2_vol.setter
    def cite_2_vol(self, cite_2_vol):
        """Sets the cite_2_vol of this Document.


        :param cite_2_vol: The cite_2_vol of this Document.  # noqa: E501
        :type: int
        """

        self._cite_2_vol = cite_2_vol

    @property
    def cite_3_page(self):
        """Gets the cite_3_page of this Document.  # noqa: E501


        :return: The cite_3_page of this Document.  # noqa: E501
        :rtype: int
        """
        return self._cite_3_page

    @cite_3_page.setter
    def cite_3_page(self, cite_3_page):
        """Sets the cite_3_page of this Document.


        :param cite_3_page: The cite_3_page of this Document.  # noqa: E501
        :type: int
        """

        self._cite_3_page = cite_3_page

    @property
    def cite_3_reporter(self):
        """Gets the cite_3_reporter of this Document.  # noqa: E501


        :return: The cite_3_reporter of this Document.  # noqa: E501
        :rtype: str
        """
        return self._cite_3_reporter

    @cite_3_reporter.setter
    def cite_3_reporter(self, cite_3_reporter):
        """Sets the cite_3_reporter of this Document.


        :param cite_3_reporter: The cite_3_reporter of this Document.  # noqa: E501
        :type: str
        """

        self._cite_3_reporter = cite_3_reporter

    @property
    def cite_3_vol(self):
        """Gets the cite_3_vol of this Document.  # noqa: E501


        :return: The cite_3_vol of this Document.  # noqa: E501
        :rtype: int
        """
        return self._cite_3_vol

    @cite_3_vol.setter
    def cite_3_vol(self, cite_3_vol):
        """Sets the cite_3_vol of this Document.


        :param cite_3_vol: The cite_3_vol of this Document.  # noqa: E501
        :type: int
        """

        self._cite_3_vol = cite_3_vol

    @property
    def citation_status(self):
        """Gets the citation_status of this Document.  # noqa: E501


        :return: The citation_status of this Document.  # noqa: E501
        :rtype: str
        """
        return self._citation_status

    @citation_status.setter
    def citation_status(self, citation_status):
        """Sets the citation_status of this Document.


        :param citation_status: The citation_status of this Document.  # noqa: E501
        :type: str
        """

        self._citation_status = citation_status

    @property
    def court(self):
        """Gets the court of this Document.  # noqa: E501


        :return: The court of this Document.  # noqa: E501
        :rtype: str
        """
        return self._court

    @court.setter
    def court(self, court):
        """Sets the court of this Document.


        :param court: The court of this Document.  # noqa: E501
        :type: str
        """

        self._court = court

    @property
    def no_title(self):
        """Gets the no_title of this Document.  # noqa: E501


        :return: The no_title of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._no_title

    @no_title.setter
    def no_title(self, no_title):
        """Sets the no_title of this Document.


        :param no_title: The no_title of this Document.  # noqa: E501
        :type: bool
        """

        self._no_title = no_title

    @property
    def party_types(self):
        """Gets the party_types of this Document.  # noqa: E501


        :return: The party_types of this Document.  # noqa: E501
        :rtype: list[str]
        """
        return self._party_types

    @party_types.setter
    def party_types(self, party_types):
        """Sets the party_types of this Document.


        :param party_types: The party_types of this Document.  # noqa: E501
        :type: list[str]
        """

        self._party_types = party_types

    @property
    def per_curium(self):
        """Gets the per_curium of this Document.  # noqa: E501


        :return: The per_curium of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._per_curium

    @per_curium.setter
    def per_curium(self, per_curium):
        """Sets the per_curium of this Document.


        :param per_curium: The per_curium of this Document.  # noqa: E501
        :type: bool
        """

        self._per_curium = per_curium

    @property
    def is_core_document(self):
        """Gets the is_core_document of this Document.  # noqa: E501


        :return: The is_core_document of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._is_core_document

    @is_core_document.setter
    def is_core_document(self, is_core_document):
        """Sets the is_core_document of this Document.


        :param is_core_document: The is_core_document of this Document.  # noqa: E501
        :type: bool
        """

        self._is_core_document = is_core_document

    @property
    def file(self):
        """Gets the file of this Document.  # noqa: E501


        :return: The file of this Document.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this Document.


        :param file: The file of this Document.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def title(self):
        """Gets the title of this Document.  # noqa: E501


        :return: The title of this Document.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Document.


        :param title: The title of this Document.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def public_note(self):
        """Gets the public_note of this Document.  # noqa: E501


        :return: The public_note of this Document.  # noqa: E501
        :rtype: str
        """
        return self._public_note

    @public_note.setter
    def public_note(self, public_note):
        """Sets the public_note of this Document.


        :param public_note: The public_note of this Document.  # noqa: E501
        :type: str
        """

        self._public_note = public_note

    @property
    def document_type_other(self):
        """Gets the document_type_other of this Document.  # noqa: E501


        :return: The document_type_other of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_type_other

    @document_type_other.setter
    def document_type_other(self, document_type_other):
        """Sets the document_type_other of this Document.


        :param document_type_other: The document_type_other of this Document.  # noqa: E501
        :type: str
        """

        self._document_type_other = document_type_other

    @property
    def external_url(self):
        """Gets the external_url of this Document.  # noqa: E501


        :return: The external_url of this Document.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this Document.


        :param external_url: The external_url of this Document.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def ecf_number(self):
        """Gets the ecf_number of this Document.  # noqa: E501


        :return: The ecf_number of this Document.  # noqa: E501
        :rtype: str
        """
        return self._ecf_number

    @ecf_number.setter
    def ecf_number(self, ecf_number):
        """Sets the ecf_number of this Document.


        :param ecf_number: The ecf_number of this Document.  # noqa: E501
        :type: str
        """

        self._ecf_number = ecf_number

    @property
    def clearinghouse_link(self):
        """Gets the clearinghouse_link of this Document.  # noqa: E501


        :return: The clearinghouse_link of this Document.  # noqa: E501
        :rtype: str
        """
        return self._clearinghouse_link

    @clearinghouse_link.setter
    def clearinghouse_link(self, clearinghouse_link):
        """Sets the clearinghouse_link of this Document.


        :param clearinghouse_link: The clearinghouse_link of this Document.  # noqa: E501
        :type: str
        """

        self._clearinghouse_link = clearinghouse_link

    @property
    def id(self):
        """Gets the id of this Document.  # noqa: E501


        :return: The id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def document_status(self):
        """Gets the document_status of this Document.  # noqa: E501


        :return: The document_status of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_status

    @document_status.setter
    def document_status(self, document_status):
        """Sets the document_status of this Document.


        :param document_status: The document_status of this Document.  # noqa: E501
        :type: str
        """

        self._document_status = document_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

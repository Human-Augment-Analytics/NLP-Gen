# coding: utf-8

"""
    Civil Rights Clearinghouse Simple API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Defendant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'institution': 'str',
        'institution_city': 'str',
        'institution_county': 'str',
        'institution_alt_state': 'str',
        'defendant_level': 'str',
        'defendant_level_other': 'str'
    }

    attribute_map = {
        'name': 'name',
        'institution': 'institution',
        'institution_city': 'institution_city',
        'institution_county': 'institution_county',
        'institution_alt_state': 'institution_alt_state',
        'defendant_level': 'defendant_level',
        'defendant_level_other': 'defendant_level_other'
    }

    def __init__(self, name=None, institution=None, institution_city=None, institution_county=None, institution_alt_state=None, defendant_level=None, defendant_level_other=None):  # noqa: E501
        """Defendant - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._institution = None
        self._institution_city = None
        self._institution_county = None
        self._institution_alt_state = None
        self._defendant_level = None
        self._defendant_level_other = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if institution is not None:
            self.institution = institution
        if institution_city is not None:
            self.institution_city = institution_city
        if institution_county is not None:
            self.institution_county = institution_county
        if institution_alt_state is not None:
            self.institution_alt_state = institution_alt_state
        if defendant_level is not None:
            self.defendant_level = defendant_level
        if defendant_level_other is not None:
            self.defendant_level_other = defendant_level_other

    @property
    def name(self):
        """Gets the name of this Defendant.  # noqa: E501


        :return: The name of this Defendant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Defendant.


        :param name: The name of this Defendant.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def institution(self):
        """Gets the institution of this Defendant.  # noqa: E501


        :return: The institution of this Defendant.  # noqa: E501
        :rtype: str
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this Defendant.


        :param institution: The institution of this Defendant.  # noqa: E501
        :type: str
        """

        self._institution = institution

    @property
    def institution_city(self):
        """Gets the institution_city of this Defendant.  # noqa: E501


        :return: The institution_city of this Defendant.  # noqa: E501
        :rtype: str
        """
        return self._institution_city

    @institution_city.setter
    def institution_city(self, institution_city):
        """Sets the institution_city of this Defendant.


        :param institution_city: The institution_city of this Defendant.  # noqa: E501
        :type: str
        """

        self._institution_city = institution_city

    @property
    def institution_county(self):
        """Gets the institution_county of this Defendant.  # noqa: E501


        :return: The institution_county of this Defendant.  # noqa: E501
        :rtype: str
        """
        return self._institution_county

    @institution_county.setter
    def institution_county(self, institution_county):
        """Sets the institution_county of this Defendant.


        :param institution_county: The institution_county of this Defendant.  # noqa: E501
        :type: str
        """

        self._institution_county = institution_county

    @property
    def institution_alt_state(self):
        """Gets the institution_alt_state of this Defendant.  # noqa: E501


        :return: The institution_alt_state of this Defendant.  # noqa: E501
        :rtype: str
        """
        return self._institution_alt_state

    @institution_alt_state.setter
    def institution_alt_state(self, institution_alt_state):
        """Sets the institution_alt_state of this Defendant.


        :param institution_alt_state: The institution_alt_state of this Defendant.  # noqa: E501
        :type: str
        """

        self._institution_alt_state = institution_alt_state

    @property
    def defendant_level(self):
        """Gets the defendant_level of this Defendant.  # noqa: E501


        :return: The defendant_level of this Defendant.  # noqa: E501
        :rtype: str
        """
        return self._defendant_level

    @defendant_level.setter
    def defendant_level(self, defendant_level):
        """Sets the defendant_level of this Defendant.


        :param defendant_level: The defendant_level of this Defendant.  # noqa: E501
        :type: str
        """

        self._defendant_level = defendant_level

    @property
    def defendant_level_other(self):
        """Gets the defendant_level_other of this Defendant.  # noqa: E501


        :return: The defendant_level_other of this Defendant.  # noqa: E501
        :rtype: str
        """
        return self._defendant_level_other

    @defendant_level_other.setter
    def defendant_level_other(self, defendant_level_other):
        """Sets the defendant_level_other of this Defendant.


        :param defendant_level_other: The defendant_level_other of this Defendant.  # noqa: E501
        :type: str
        """

        self._defendant_level_other = defendant_level_other

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Defendant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Defendant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Civil Rights Clearinghouse Simple API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Case(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attorney_orgs': 'list[str]',
        'available_documents': 'list[str]',
        'case_defendants': 'list[Defendant]',
        'case_documents': 'list[Document]',
        'case_dockets': 'list[Docket]',
        'case_resources': 'list[Resource]',
        'case_ongoing': 'str',
        'case_status': 'str',
        'case_types': 'list[str]',
        'cause_other': 'str',
        'causes': 'list[str]',
        'class_action_granted': 'str',
        'class_action_sought': 'str',
        'closing_year': 'int',
        'court': 'str',
        'custom_issues': 'list[str]',
        'defendant_payment': 'str',
        'docket_status': 'str',
        'filing_date': 'str',
        'filing_year': 'int',
        'id': 'int',
        'injuction_duration': 'int',
        'issues': 'list[str]',
        'last_checked_date': 'str',
        'main_docket': 'Docket',
        'name': 'str',
        'never_filed': 'bool',
        'non_docket_case_number': 'str',
        'non_docket_case_number_type': 'str',
        'non_docket_case_number_type_other': 'str',
        'order_end_year': 'int',
        'order_start_year': 'int',
        'permanent_injuction': 'bool',
        'plaintiff_description': 'str',
        'prevailing_party': 'str',
        'pro_se_status': 'str',
        'public_interest_lawyer': 'str',
        'relief_natures': 'list[str]',
        'relief_nature_other': 'str',
        'relief_sources': 'list[str]',
        'settlement_agreement': 'list[str]',
        'settlement_judgment_date': 'str',
        'settlement_judgment_year': 'int',
        'special_collections': 'list[str]',
        'state': 'str',
        'summary': 'str',
        'summary_published_date': 'str',
        'summary_short': 'str',
        'summary_tiny': 'str',
        'terminating_date': 'str',
        'clearinghouse_link': 'str',
        'is_action': 'bool',
        'plaintiff_type': 'list[CasePlaintiffType]',
        'defendant_type': 'list[CasePlaintiffType]',
        'facility_type': 'list[CasePlaintiffType]',
        'constitutional_clause': 'list[CasePlaintiffType]',
        'special_case_type': 'list[CasePlaintiffType]',
        'content_of_injunction': 'list[CasePlaintiffType]'
    }

    attribute_map = {
        'attorney_orgs': 'attorney_orgs',
        'available_documents': 'available_documents',
        'case_defendants': 'case_defendants',
        'case_documents': 'case_documents',
        'case_dockets': 'case_dockets',
        'case_resources': 'case_resources',
        'case_ongoing': 'case_ongoing',
        'case_status': 'case_status',
        'case_types': 'case_types',
        'cause_other': 'cause_other',
        'causes': 'causes',
        'class_action_granted': 'class_action_granted',
        'class_action_sought': 'class_action_sought',
        'closing_year': 'closing_year',
        'court': 'court',
        'custom_issues': 'custom_issues',
        'defendant_payment': 'defendant_payment',
        'docket_status': 'docket_status',
        'filing_date': 'filing_date',
        'filing_year': 'filing_year',
        'id': 'id',
        'injuction_duration': 'injuction_duration',
        'issues': 'issues',
        'last_checked_date': 'last_checked_date',
        'main_docket': 'main_docket',
        'name': 'name',
        'never_filed': 'never_filed',
        'non_docket_case_number': 'non_docket_case_number',
        'non_docket_case_number_type': 'non_docket_case_number_type',
        'non_docket_case_number_type_other': 'non_docket_case_number_type_other',
        'order_end_year': 'order_end_year',
        'order_start_year': 'order_start_year',
        'permanent_injuction': 'permanent_injuction',
        'plaintiff_description': 'plaintiff_description',
        'prevailing_party': 'prevailing_party',
        'pro_se_status': 'pro_se_status',
        'public_interest_lawyer': 'public_interest_lawyer',
        'relief_natures': 'relief_natures',
        'relief_nature_other': 'relief_nature_other',
        'relief_sources': 'relief_sources',
        'settlement_agreement': 'settlement_agreement',
        'settlement_judgment_date': 'settlement_judgment_date',
        'settlement_judgment_year': 'settlement_judgment_year',
        'special_collections': 'special_collections',
        'state': 'state',
        'summary': 'summary',
        'summary_published_date': 'summary_published_date',
        'summary_short': 'summary_short',
        'summary_tiny': 'summary_tiny',
        'terminating_date': 'terminating_date',
        'clearinghouse_link': 'clearinghouse_link',
        'is_action': 'is_action',
        'plaintiff_type': 'plaintiff_type',
        'defendant_type': 'defendant_type',
        'facility_type': 'facility_type',
        'constitutional_clause': 'constitutional_clause',
        'special_case_type': 'special_case_type',
        'content_of_injunction': 'content_of_injunction'
    }

    def __init__(self, attorney_orgs=None, available_documents=None, case_defendants=None, case_documents=None, case_dockets=None, case_resources=None, case_ongoing=None, case_status=None, case_types=None, cause_other=None, causes=None, class_action_granted=None, class_action_sought=None, closing_year=None, court=None, custom_issues=None, defendant_payment=None, docket_status=None, filing_date=None, filing_year=None, id=None, injuction_duration=None, issues=None, last_checked_date=None, main_docket=None, name=None, never_filed=None, non_docket_case_number=None, non_docket_case_number_type=None, non_docket_case_number_type_other=None, order_end_year=None, order_start_year=None, permanent_injuction=None, plaintiff_description=None, prevailing_party=None, pro_se_status=None, public_interest_lawyer=None, relief_natures=None, relief_nature_other=None, relief_sources=None, settlement_agreement=None, settlement_judgment_date=None, settlement_judgment_year=None, special_collections=None, state=None, summary=None, summary_published_date=None, summary_short=None, summary_tiny=None, terminating_date=None, clearinghouse_link=None, is_action=None, plaintiff_type=None, defendant_type=None, facility_type=None, constitutional_clause=None, special_case_type=None, content_of_injunction=None):  # noqa: E501
        """Case - a model defined in Swagger"""  # noqa: E501
        self._attorney_orgs = None
        self._available_documents = None
        self._case_defendants = None
        self._case_documents = None
        self._case_dockets = None
        self._case_resources = None
        self._case_ongoing = None
        self._case_status = None
        self._case_types = None
        self._cause_other = None
        self._causes = None
        self._class_action_granted = None
        self._class_action_sought = None
        self._closing_year = None
        self._court = None
        self._custom_issues = None
        self._defendant_payment = None
        self._docket_status = None
        self._filing_date = None
        self._filing_year = None
        self._id = None
        self._injuction_duration = None
        self._issues = None
        self._last_checked_date = None
        self._main_docket = None
        self._name = None
        self._never_filed = None
        self._non_docket_case_number = None
        self._non_docket_case_number_type = None
        self._non_docket_case_number_type_other = None
        self._order_end_year = None
        self._order_start_year = None
        self._permanent_injuction = None
        self._plaintiff_description = None
        self._prevailing_party = None
        self._pro_se_status = None
        self._public_interest_lawyer = None
        self._relief_natures = None
        self._relief_nature_other = None
        self._relief_sources = None
        self._settlement_agreement = None
        self._settlement_judgment_date = None
        self._settlement_judgment_year = None
        self._special_collections = None
        self._state = None
        self._summary = None
        self._summary_published_date = None
        self._summary_short = None
        self._summary_tiny = None
        self._terminating_date = None
        self._clearinghouse_link = None
        self._is_action = None
        self._plaintiff_type = None
        self._defendant_type = None
        self._facility_type = None
        self._constitutional_clause = None
        self._special_case_type = None
        self._content_of_injunction = None
        self.discriminator = None
        if attorney_orgs is not None:
            self.attorney_orgs = attorney_orgs
        if available_documents is not None:
            self.available_documents = available_documents
        if case_defendants is not None:
            self.case_defendants = case_defendants
        if case_documents is not None:
            self.case_documents = case_documents
        if case_dockets is not None:
            self.case_dockets = case_dockets
        if case_resources is not None:
            self.case_resources = case_resources
        if case_ongoing is not None:
            self.case_ongoing = case_ongoing
        if case_status is not None:
            self.case_status = case_status
        if case_types is not None:
            self.case_types = case_types
        if cause_other is not None:
            self.cause_other = cause_other
        if causes is not None:
            self.causes = causes
        if class_action_granted is not None:
            self.class_action_granted = class_action_granted
        if class_action_sought is not None:
            self.class_action_sought = class_action_sought
        if closing_year is not None:
            self.closing_year = closing_year
        if court is not None:
            self.court = court
        if custom_issues is not None:
            self.custom_issues = custom_issues
        if defendant_payment is not None:
            self.defendant_payment = defendant_payment
        if docket_status is not None:
            self.docket_status = docket_status
        if filing_date is not None:
            self.filing_date = filing_date
        if filing_year is not None:
            self.filing_year = filing_year
        if id is not None:
            self.id = id
        if injuction_duration is not None:
            self.injuction_duration = injuction_duration
        if issues is not None:
            self.issues = issues
        if last_checked_date is not None:
            self.last_checked_date = last_checked_date
        if main_docket is not None:
            self.main_docket = main_docket
        if name is not None:
            self.name = name
        if never_filed is not None:
            self.never_filed = never_filed
        if non_docket_case_number is not None:
            self.non_docket_case_number = non_docket_case_number
        if non_docket_case_number_type is not None:
            self.non_docket_case_number_type = non_docket_case_number_type
        if non_docket_case_number_type_other is not None:
            self.non_docket_case_number_type_other = non_docket_case_number_type_other
        if order_end_year is not None:
            self.order_end_year = order_end_year
        if order_start_year is not None:
            self.order_start_year = order_start_year
        if permanent_injuction is not None:
            self.permanent_injuction = permanent_injuction
        if plaintiff_description is not None:
            self.plaintiff_description = plaintiff_description
        if prevailing_party is not None:
            self.prevailing_party = prevailing_party
        if pro_se_status is not None:
            self.pro_se_status = pro_se_status
        if public_interest_lawyer is not None:
            self.public_interest_lawyer = public_interest_lawyer
        if relief_natures is not None:
            self.relief_natures = relief_natures
        if relief_nature_other is not None:
            self.relief_nature_other = relief_nature_other
        if relief_sources is not None:
            self.relief_sources = relief_sources
        if settlement_agreement is not None:
            self.settlement_agreement = settlement_agreement
        if settlement_judgment_date is not None:
            self.settlement_judgment_date = settlement_judgment_date
        if settlement_judgment_year is not None:
            self.settlement_judgment_year = settlement_judgment_year
        if special_collections is not None:
            self.special_collections = special_collections
        if state is not None:
            self.state = state
        if summary is not None:
            self.summary = summary
        if summary_published_date is not None:
            self.summary_published_date = summary_published_date
        if summary_short is not None:
            self.summary_short = summary_short
        if summary_tiny is not None:
            self.summary_tiny = summary_tiny
        if terminating_date is not None:
            self.terminating_date = terminating_date
        if clearinghouse_link is not None:
            self.clearinghouse_link = clearinghouse_link
        if is_action is not None:
            self.is_action = is_action
        if plaintiff_type is not None:
            self.plaintiff_type = plaintiff_type
        if defendant_type is not None:
            self.defendant_type = defendant_type
        if facility_type is not None:
            self.facility_type = facility_type
        if constitutional_clause is not None:
            self.constitutional_clause = constitutional_clause
        if special_case_type is not None:
            self.special_case_type = special_case_type
        if content_of_injunction is not None:
            self.content_of_injunction = content_of_injunction

    @property
    def attorney_orgs(self):
        """Gets the attorney_orgs of this Case.  # noqa: E501

        Organizations that represent the plaintiff. The possible organizations for ```attorney_orgs``` come from a predefined list of public interest organizations. For a full list, including a description and link for each organization see [the Clearinhouse page on attorney organizations](https://clearinghouse.net/attorney-orgs)  # noqa: E501

        :return: The attorney_orgs of this Case.  # noqa: E501
        :rtype: list[str]
        """
        return self._attorney_orgs

    @attorney_orgs.setter
    def attorney_orgs(self, attorney_orgs):
        """Sets the attorney_orgs of this Case.

        Organizations that represent the plaintiff. The possible organizations for ```attorney_orgs``` come from a predefined list of public interest organizations. For a full list, including a description and link for each organization see [the Clearinhouse page on attorney organizations](https://clearinghouse.net/attorney-orgs)  # noqa: E501

        :param attorney_orgs: The attorney_orgs of this Case.  # noqa: E501
        :type: list[str]
        """

        self._attorney_orgs = attorney_orgs

    @property
    def available_documents(self):
        """Gets the available_documents of this Case.  # noqa: E501

        A `code span` of the types of documents available in the Clearinhouse for this case. For example, if the array includes \"Complaint (any)\", then there is at least one document that is a complaint for the case.  # noqa: E501

        :return: The available_documents of this Case.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_documents

    @available_documents.setter
    def available_documents(self, available_documents):
        """Sets the available_documents of this Case.

        A `code span` of the types of documents available in the Clearinhouse for this case. For example, if the array includes \"Complaint (any)\", then there is at least one document that is a complaint for the case.  # noqa: E501

        :param available_documents: The available_documents of this Case.  # noqa: E501
        :type: list[str]
        """

        self._available_documents = available_documents

    @property
    def case_defendants(self):
        """Gets the case_defendants of this Case.  # noqa: E501


        :return: The case_defendants of this Case.  # noqa: E501
        :rtype: list[Defendant]
        """
        return self._case_defendants

    @case_defendants.setter
    def case_defendants(self, case_defendants):
        """Sets the case_defendants of this Case.


        :param case_defendants: The case_defendants of this Case.  # noqa: E501
        :type: list[Defendant]
        """

        self._case_defendants = case_defendants

    @property
    def case_documents(self):
        """Gets the case_documents of this Case.  # noqa: E501


        :return: The case_documents of this Case.  # noqa: E501
        :rtype: list[Document]
        """
        return self._case_documents

    @case_documents.setter
    def case_documents(self, case_documents):
        """Sets the case_documents of this Case.


        :param case_documents: The case_documents of this Case.  # noqa: E501
        :type: list[Document]
        """

        self._case_documents = case_documents

    @property
    def case_dockets(self):
        """Gets the case_dockets of this Case.  # noqa: E501


        :return: The case_dockets of this Case.  # noqa: E501
        :rtype: list[Docket]
        """
        return self._case_dockets

    @case_dockets.setter
    def case_dockets(self, case_dockets):
        """Sets the case_dockets of this Case.


        :param case_dockets: The case_dockets of this Case.  # noqa: E501
        :type: list[Docket]
        """

        self._case_dockets = case_dockets

    @property
    def case_resources(self):
        """Gets the case_resources of this Case.  # noqa: E501


        :return: The case_resources of this Case.  # noqa: E501
        :rtype: list[Resource]
        """
        return self._case_resources

    @case_resources.setter
    def case_resources(self, case_resources):
        """Sets the case_resources of this Case.


        :param case_resources: The case_resources of this Case.  # noqa: E501
        :type: list[Resource]
        """

        self._case_resources = case_resources

    @property
    def case_ongoing(self):
        """Gets the case_ongoing of this Case.  # noqa: E501


        :return: The case_ongoing of this Case.  # noqa: E501
        :rtype: str
        """
        return self._case_ongoing

    @case_ongoing.setter
    def case_ongoing(self, case_ongoing):
        """Sets the case_ongoing of this Case.


        :param case_ongoing: The case_ongoing of this Case.  # noqa: E501
        :type: str
        """

        self._case_ongoing = case_ongoing

    @property
    def case_status(self):
        """Gets the case_status of this Case.  # noqa: E501


        :return: The case_status of this Case.  # noqa: E501
        :rtype: str
        """
        return self._case_status

    @case_status.setter
    def case_status(self, case_status):
        """Sets the case_status of this Case.


        :param case_status: The case_status of this Case.  # noqa: E501
        :type: str
        """

        self._case_status = case_status

    @property
    def case_types(self):
        """Gets the case_types of this Case.  # noqa: E501


        :return: The case_types of this Case.  # noqa: E501
        :rtype: list[str]
        """
        return self._case_types

    @case_types.setter
    def case_types(self, case_types):
        """Sets the case_types of this Case.


        :param case_types: The case_types of this Case.  # noqa: E501
        :type: list[str]
        """

        self._case_types = case_types

    @property
    def cause_other(self):
        """Gets the cause_other of this Case.  # noqa: E501


        :return: The cause_other of this Case.  # noqa: E501
        :rtype: str
        """
        return self._cause_other

    @cause_other.setter
    def cause_other(self, cause_other):
        """Sets the cause_other of this Case.


        :param cause_other: The cause_other of this Case.  # noqa: E501
        :type: str
        """

        self._cause_other = cause_other

    @property
    def causes(self):
        """Gets the causes of this Case.  # noqa: E501


        :return: The causes of this Case.  # noqa: E501
        :rtype: list[str]
        """
        return self._causes

    @causes.setter
    def causes(self, causes):
        """Sets the causes of this Case.


        :param causes: The causes of this Case.  # noqa: E501
        :type: list[str]
        """

        self._causes = causes

    @property
    def class_action_granted(self):
        """Gets the class_action_granted of this Case.  # noqa: E501


        :return: The class_action_granted of this Case.  # noqa: E501
        :rtype: str
        """
        return self._class_action_granted

    @class_action_granted.setter
    def class_action_granted(self, class_action_granted):
        """Sets the class_action_granted of this Case.


        :param class_action_granted: The class_action_granted of this Case.  # noqa: E501
        :type: str
        """

        self._class_action_granted = class_action_granted

    @property
    def class_action_sought(self):
        """Gets the class_action_sought of this Case.  # noqa: E501


        :return: The class_action_sought of this Case.  # noqa: E501
        :rtype: str
        """
        return self._class_action_sought

    @class_action_sought.setter
    def class_action_sought(self, class_action_sought):
        """Sets the class_action_sought of this Case.


        :param class_action_sought: The class_action_sought of this Case.  # noqa: E501
        :type: str
        """

        self._class_action_sought = class_action_sought

    @property
    def closing_year(self):
        """Gets the closing_year of this Case.  # noqa: E501


        :return: The closing_year of this Case.  # noqa: E501
        :rtype: int
        """
        return self._closing_year

    @closing_year.setter
    def closing_year(self, closing_year):
        """Sets the closing_year of this Case.


        :param closing_year: The closing_year of this Case.  # noqa: E501
        :type: int
        """

        self._closing_year = closing_year

    @property
    def court(self):
        """Gets the court of this Case.  # noqa: E501


        :return: The court of this Case.  # noqa: E501
        :rtype: str
        """
        return self._court

    @court.setter
    def court(self, court):
        """Sets the court of this Case.


        :param court: The court of this Case.  # noqa: E501
        :type: str
        """

        self._court = court

    @property
    def custom_issues(self):
        """Gets the custom_issues of this Case.  # noqa: E501


        :return: The custom_issues of this Case.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_issues

    @custom_issues.setter
    def custom_issues(self, custom_issues):
        """Sets the custom_issues of this Case.


        :param custom_issues: The custom_issues of this Case.  # noqa: E501
        :type: list[str]
        """

        self._custom_issues = custom_issues

    @property
    def defendant_payment(self):
        """Gets the defendant_payment of this Case.  # noqa: E501


        :return: The defendant_payment of this Case.  # noqa: E501
        :rtype: str
        """
        return self._defendant_payment

    @defendant_payment.setter
    def defendant_payment(self, defendant_payment):
        """Sets the defendant_payment of this Case.


        :param defendant_payment: The defendant_payment of this Case.  # noqa: E501
        :type: str
        """

        self._defendant_payment = defendant_payment

    @property
    def docket_status(self):
        """Gets the docket_status of this Case.  # noqa: E501


        :return: The docket_status of this Case.  # noqa: E501
        :rtype: str
        """
        return self._docket_status

    @docket_status.setter
    def docket_status(self, docket_status):
        """Sets the docket_status of this Case.


        :param docket_status: The docket_status of this Case.  # noqa: E501
        :type: str
        """

        self._docket_status = docket_status

    @property
    def filing_date(self):
        """Gets the filing_date of this Case.  # noqa: E501


        :return: The filing_date of this Case.  # noqa: E501
        :rtype: str
        """
        return self._filing_date

    @filing_date.setter
    def filing_date(self, filing_date):
        """Sets the filing_date of this Case.


        :param filing_date: The filing_date of this Case.  # noqa: E501
        :type: str
        """

        self._filing_date = filing_date

    @property
    def filing_year(self):
        """Gets the filing_year of this Case.  # noqa: E501


        :return: The filing_year of this Case.  # noqa: E501
        :rtype: int
        """
        return self._filing_year

    @filing_year.setter
    def filing_year(self, filing_year):
        """Sets the filing_year of this Case.


        :param filing_year: The filing_year of this Case.  # noqa: E501
        :type: int
        """

        self._filing_year = filing_year

    @property
    def id(self):
        """Gets the id of this Case.  # noqa: E501


        :return: The id of this Case.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Case.


        :param id: The id of this Case.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def injuction_duration(self):
        """Gets the injuction_duration of this Case.  # noqa: E501


        :return: The injuction_duration of this Case.  # noqa: E501
        :rtype: int
        """
        return self._injuction_duration

    @injuction_duration.setter
    def injuction_duration(self, injuction_duration):
        """Sets the injuction_duration of this Case.


        :param injuction_duration: The injuction_duration of this Case.  # noqa: E501
        :type: int
        """

        self._injuction_duration = injuction_duration

    @property
    def issues(self):
        """Gets the issues of this Case.  # noqa: E501


        :return: The issues of this Case.  # noqa: E501
        :rtype: list[str]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this Case.


        :param issues: The issues of this Case.  # noqa: E501
        :type: list[str]
        """

        self._issues = issues

    @property
    def last_checked_date(self):
        """Gets the last_checked_date of this Case.  # noqa: E501


        :return: The last_checked_date of this Case.  # noqa: E501
        :rtype: str
        """
        return self._last_checked_date

    @last_checked_date.setter
    def last_checked_date(self, last_checked_date):
        """Sets the last_checked_date of this Case.


        :param last_checked_date: The last_checked_date of this Case.  # noqa: E501
        :type: str
        """

        self._last_checked_date = last_checked_date

    @property
    def main_docket(self):
        """Gets the main_docket of this Case.  # noqa: E501


        :return: The main_docket of this Case.  # noqa: E501
        :rtype: Docket
        """
        return self._main_docket

    @main_docket.setter
    def main_docket(self, main_docket):
        """Sets the main_docket of this Case.


        :param main_docket: The main_docket of this Case.  # noqa: E501
        :type: Docket
        """

        self._main_docket = main_docket

    @property
    def name(self):
        """Gets the name of this Case.  # noqa: E501


        :return: The name of this Case.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Case.


        :param name: The name of this Case.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def never_filed(self):
        """Gets the never_filed of this Case.  # noqa: E501


        :return: The never_filed of this Case.  # noqa: E501
        :rtype: bool
        """
        return self._never_filed

    @never_filed.setter
    def never_filed(self, never_filed):
        """Sets the never_filed of this Case.


        :param never_filed: The never_filed of this Case.  # noqa: E501
        :type: bool
        """

        self._never_filed = never_filed

    @property
    def non_docket_case_number(self):
        """Gets the non_docket_case_number of this Case.  # noqa: E501


        :return: The non_docket_case_number of this Case.  # noqa: E501
        :rtype: str
        """
        return self._non_docket_case_number

    @non_docket_case_number.setter
    def non_docket_case_number(self, non_docket_case_number):
        """Sets the non_docket_case_number of this Case.


        :param non_docket_case_number: The non_docket_case_number of this Case.  # noqa: E501
        :type: str
        """

        self._non_docket_case_number = non_docket_case_number

    @property
    def non_docket_case_number_type(self):
        """Gets the non_docket_case_number_type of this Case.  # noqa: E501


        :return: The non_docket_case_number_type of this Case.  # noqa: E501
        :rtype: str
        """
        return self._non_docket_case_number_type

    @non_docket_case_number_type.setter
    def non_docket_case_number_type(self, non_docket_case_number_type):
        """Sets the non_docket_case_number_type of this Case.


        :param non_docket_case_number_type: The non_docket_case_number_type of this Case.  # noqa: E501
        :type: str
        """

        self._non_docket_case_number_type = non_docket_case_number_type

    @property
    def non_docket_case_number_type_other(self):
        """Gets the non_docket_case_number_type_other of this Case.  # noqa: E501


        :return: The non_docket_case_number_type_other of this Case.  # noqa: E501
        :rtype: str
        """
        return self._non_docket_case_number_type_other

    @non_docket_case_number_type_other.setter
    def non_docket_case_number_type_other(self, non_docket_case_number_type_other):
        """Sets the non_docket_case_number_type_other of this Case.


        :param non_docket_case_number_type_other: The non_docket_case_number_type_other of this Case.  # noqa: E501
        :type: str
        """

        self._non_docket_case_number_type_other = non_docket_case_number_type_other

    @property
    def order_end_year(self):
        """Gets the order_end_year of this Case.  # noqa: E501


        :return: The order_end_year of this Case.  # noqa: E501
        :rtype: int
        """
        return self._order_end_year

    @order_end_year.setter
    def order_end_year(self, order_end_year):
        """Sets the order_end_year of this Case.


        :param order_end_year: The order_end_year of this Case.  # noqa: E501
        :type: int
        """

        self._order_end_year = order_end_year

    @property
    def order_start_year(self):
        """Gets the order_start_year of this Case.  # noqa: E501


        :return: The order_start_year of this Case.  # noqa: E501
        :rtype: int
        """
        return self._order_start_year

    @order_start_year.setter
    def order_start_year(self, order_start_year):
        """Sets the order_start_year of this Case.


        :param order_start_year: The order_start_year of this Case.  # noqa: E501
        :type: int
        """

        self._order_start_year = order_start_year

    @property
    def permanent_injuction(self):
        """Gets the permanent_injuction of this Case.  # noqa: E501


        :return: The permanent_injuction of this Case.  # noqa: E501
        :rtype: bool
        """
        return self._permanent_injuction

    @permanent_injuction.setter
    def permanent_injuction(self, permanent_injuction):
        """Sets the permanent_injuction of this Case.


        :param permanent_injuction: The permanent_injuction of this Case.  # noqa: E501
        :type: bool
        """

        self._permanent_injuction = permanent_injuction

    @property
    def plaintiff_description(self):
        """Gets the plaintiff_description of this Case.  # noqa: E501


        :return: The plaintiff_description of this Case.  # noqa: E501
        :rtype: str
        """
        return self._plaintiff_description

    @plaintiff_description.setter
    def plaintiff_description(self, plaintiff_description):
        """Sets the plaintiff_description of this Case.


        :param plaintiff_description: The plaintiff_description of this Case.  # noqa: E501
        :type: str
        """

        self._plaintiff_description = plaintiff_description

    @property
    def prevailing_party(self):
        """Gets the prevailing_party of this Case.  # noqa: E501


        :return: The prevailing_party of this Case.  # noqa: E501
        :rtype: str
        """
        return self._prevailing_party

    @prevailing_party.setter
    def prevailing_party(self, prevailing_party):
        """Sets the prevailing_party of this Case.


        :param prevailing_party: The prevailing_party of this Case.  # noqa: E501
        :type: str
        """

        self._prevailing_party = prevailing_party

    @property
    def pro_se_status(self):
        """Gets the pro_se_status of this Case.  # noqa: E501


        :return: The pro_se_status of this Case.  # noqa: E501
        :rtype: str
        """
        return self._pro_se_status

    @pro_se_status.setter
    def pro_se_status(self, pro_se_status):
        """Sets the pro_se_status of this Case.


        :param pro_se_status: The pro_se_status of this Case.  # noqa: E501
        :type: str
        """

        self._pro_se_status = pro_se_status

    @property
    def public_interest_lawyer(self):
        """Gets the public_interest_lawyer of this Case.  # noqa: E501


        :return: The public_interest_lawyer of this Case.  # noqa: E501
        :rtype: str
        """
        return self._public_interest_lawyer

    @public_interest_lawyer.setter
    def public_interest_lawyer(self, public_interest_lawyer):
        """Sets the public_interest_lawyer of this Case.


        :param public_interest_lawyer: The public_interest_lawyer of this Case.  # noqa: E501
        :type: str
        """

        self._public_interest_lawyer = public_interest_lawyer

    @property
    def relief_natures(self):
        """Gets the relief_natures of this Case.  # noqa: E501


        :return: The relief_natures of this Case.  # noqa: E501
        :rtype: list[str]
        """
        return self._relief_natures

    @relief_natures.setter
    def relief_natures(self, relief_natures):
        """Sets the relief_natures of this Case.


        :param relief_natures: The relief_natures of this Case.  # noqa: E501
        :type: list[str]
        """

        self._relief_natures = relief_natures

    @property
    def relief_nature_other(self):
        """Gets the relief_nature_other of this Case.  # noqa: E501


        :return: The relief_nature_other of this Case.  # noqa: E501
        :rtype: str
        """
        return self._relief_nature_other

    @relief_nature_other.setter
    def relief_nature_other(self, relief_nature_other):
        """Sets the relief_nature_other of this Case.


        :param relief_nature_other: The relief_nature_other of this Case.  # noqa: E501
        :type: str
        """

        self._relief_nature_other = relief_nature_other

    @property
    def relief_sources(self):
        """Gets the relief_sources of this Case.  # noqa: E501


        :return: The relief_sources of this Case.  # noqa: E501
        :rtype: list[str]
        """
        return self._relief_sources

    @relief_sources.setter
    def relief_sources(self, relief_sources):
        """Sets the relief_sources of this Case.


        :param relief_sources: The relief_sources of this Case.  # noqa: E501
        :type: list[str]
        """

        self._relief_sources = relief_sources

    @property
    def settlement_agreement(self):
        """Gets the settlement_agreement of this Case.  # noqa: E501


        :return: The settlement_agreement of this Case.  # noqa: E501
        :rtype: list[str]
        """
        return self._settlement_agreement

    @settlement_agreement.setter
    def settlement_agreement(self, settlement_agreement):
        """Sets the settlement_agreement of this Case.


        :param settlement_agreement: The settlement_agreement of this Case.  # noqa: E501
        :type: list[str]
        """

        self._settlement_agreement = settlement_agreement

    @property
    def settlement_judgment_date(self):
        """Gets the settlement_judgment_date of this Case.  # noqa: E501


        :return: The settlement_judgment_date of this Case.  # noqa: E501
        :rtype: str
        """
        return self._settlement_judgment_date

    @settlement_judgment_date.setter
    def settlement_judgment_date(self, settlement_judgment_date):
        """Sets the settlement_judgment_date of this Case.


        :param settlement_judgment_date: The settlement_judgment_date of this Case.  # noqa: E501
        :type: str
        """

        self._settlement_judgment_date = settlement_judgment_date

    @property
    def settlement_judgment_year(self):
        """Gets the settlement_judgment_year of this Case.  # noqa: E501


        :return: The settlement_judgment_year of this Case.  # noqa: E501
        :rtype: int
        """
        return self._settlement_judgment_year

    @settlement_judgment_year.setter
    def settlement_judgment_year(self, settlement_judgment_year):
        """Sets the settlement_judgment_year of this Case.


        :param settlement_judgment_year: The settlement_judgment_year of this Case.  # noqa: E501
        :type: int
        """

        self._settlement_judgment_year = settlement_judgment_year

    @property
    def special_collections(self):
        """Gets the special_collections of this Case.  # noqa: E501


        :return: The special_collections of this Case.  # noqa: E501
        :rtype: list[str]
        """
        return self._special_collections

    @special_collections.setter
    def special_collections(self, special_collections):
        """Sets the special_collections of this Case.


        :param special_collections: The special_collections of this Case.  # noqa: E501
        :type: list[str]
        """

        self._special_collections = special_collections

    @property
    def state(self):
        """Gets the state of this Case.  # noqa: E501


        :return: The state of this Case.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Case.


        :param state: The state of this Case.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def summary(self):
        """Gets the summary of this Case.  # noqa: E501


        :return: The summary of this Case.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Case.


        :param summary: The summary of this Case.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def summary_published_date(self):
        """Gets the summary_published_date of this Case.  # noqa: E501


        :return: The summary_published_date of this Case.  # noqa: E501
        :rtype: str
        """
        return self._summary_published_date

    @summary_published_date.setter
    def summary_published_date(self, summary_published_date):
        """Sets the summary_published_date of this Case.


        :param summary_published_date: The summary_published_date of this Case.  # noqa: E501
        :type: str
        """

        self._summary_published_date = summary_published_date

    @property
    def summary_short(self):
        """Gets the summary_short of this Case.  # noqa: E501


        :return: The summary_short of this Case.  # noqa: E501
        :rtype: str
        """
        return self._summary_short

    @summary_short.setter
    def summary_short(self, summary_short):
        """Sets the summary_short of this Case.


        :param summary_short: The summary_short of this Case.  # noqa: E501
        :type: str
        """

        self._summary_short = summary_short

    @property
    def summary_tiny(self):
        """Gets the summary_tiny of this Case.  # noqa: E501


        :return: The summary_tiny of this Case.  # noqa: E501
        :rtype: str
        """
        return self._summary_tiny

    @summary_tiny.setter
    def summary_tiny(self, summary_tiny):
        """Sets the summary_tiny of this Case.


        :param summary_tiny: The summary_tiny of this Case.  # noqa: E501
        :type: str
        """

        self._summary_tiny = summary_tiny

    @property
    def terminating_date(self):
        """Gets the terminating_date of this Case.  # noqa: E501


        :return: The terminating_date of this Case.  # noqa: E501
        :rtype: str
        """
        return self._terminating_date

    @terminating_date.setter
    def terminating_date(self, terminating_date):
        """Sets the terminating_date of this Case.


        :param terminating_date: The terminating_date of this Case.  # noqa: E501
        :type: str
        """

        self._terminating_date = terminating_date

    @property
    def clearinghouse_link(self):
        """Gets the clearinghouse_link of this Case.  # noqa: E501


        :return: The clearinghouse_link of this Case.  # noqa: E501
        :rtype: str
        """
        return self._clearinghouse_link

    @clearinghouse_link.setter
    def clearinghouse_link(self, clearinghouse_link):
        """Sets the clearinghouse_link of this Case.


        :param clearinghouse_link: The clearinghouse_link of this Case.  # noqa: E501
        :type: str
        """

        self._clearinghouse_link = clearinghouse_link

    @property
    def is_action(self):
        """Gets the is_action of this Case.  # noqa: E501


        :return: The is_action of this Case.  # noqa: E501
        :rtype: bool
        """
        return self._is_action

    @is_action.setter
    def is_action(self, is_action):
        """Sets the is_action of this Case.


        :param is_action: The is_action of this Case.  # noqa: E501
        :type: bool
        """

        self._is_action = is_action

    @property
    def plaintiff_type(self):
        """Gets the plaintiff_type of this Case.  # noqa: E501


        :return: The plaintiff_type of this Case.  # noqa: E501
        :rtype: list[CasePlaintiffType]
        """
        return self._plaintiff_type

    @plaintiff_type.setter
    def plaintiff_type(self, plaintiff_type):
        """Sets the plaintiff_type of this Case.


        :param plaintiff_type: The plaintiff_type of this Case.  # noqa: E501
        :type: list[CasePlaintiffType]
        """

        self._plaintiff_type = plaintiff_type

    @property
    def defendant_type(self):
        """Gets the defendant_type of this Case.  # noqa: E501


        :return: The defendant_type of this Case.  # noqa: E501
        :rtype: list[CasePlaintiffType]
        """
        return self._defendant_type

    @defendant_type.setter
    def defendant_type(self, defendant_type):
        """Sets the defendant_type of this Case.


        :param defendant_type: The defendant_type of this Case.  # noqa: E501
        :type: list[CasePlaintiffType]
        """

        self._defendant_type = defendant_type

    @property
    def facility_type(self):
        """Gets the facility_type of this Case.  # noqa: E501


        :return: The facility_type of this Case.  # noqa: E501
        :rtype: list[CasePlaintiffType]
        """
        return self._facility_type

    @facility_type.setter
    def facility_type(self, facility_type):
        """Sets the facility_type of this Case.


        :param facility_type: The facility_type of this Case.  # noqa: E501
        :type: list[CasePlaintiffType]
        """

        self._facility_type = facility_type

    @property
    def constitutional_clause(self):
        """Gets the constitutional_clause of this Case.  # noqa: E501


        :return: The constitutional_clause of this Case.  # noqa: E501
        :rtype: list[CasePlaintiffType]
        """
        return self._constitutional_clause

    @constitutional_clause.setter
    def constitutional_clause(self, constitutional_clause):
        """Sets the constitutional_clause of this Case.


        :param constitutional_clause: The constitutional_clause of this Case.  # noqa: E501
        :type: list[CasePlaintiffType]
        """

        self._constitutional_clause = constitutional_clause

    @property
    def special_case_type(self):
        """Gets the special_case_type of this Case.  # noqa: E501


        :return: The special_case_type of this Case.  # noqa: E501
        :rtype: list[CasePlaintiffType]
        """
        return self._special_case_type

    @special_case_type.setter
    def special_case_type(self, special_case_type):
        """Sets the special_case_type of this Case.


        :param special_case_type: The special_case_type of this Case.  # noqa: E501
        :type: list[CasePlaintiffType]
        """

        self._special_case_type = special_case_type

    @property
    def content_of_injunction(self):
        """Gets the content_of_injunction of this Case.  # noqa: E501


        :return: The content_of_injunction of this Case.  # noqa: E501
        :rtype: list[CasePlaintiffType]
        """
        return self._content_of_injunction

    @content_of_injunction.setter
    def content_of_injunction(self, content_of_injunction):
        """Sets the content_of_injunction of this Case.


        :param content_of_injunction: The content_of_injunction of this Case.  # noqa: E501
        :type: list[CasePlaintiffType]
        """

        self._content_of_injunction = content_of_injunction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Case, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Case):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
